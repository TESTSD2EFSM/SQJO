-- @path MM=/sequencediagram/model/sequencediagram.ecore
-- @path MM1=/efsm/model/efsm.ecore

module SequenceDiagram2EFSM;
create OUT : EFSM from IN : SequenceDiagram;

helper def : preState     : EFSM!AbstractState = 0;
helper def : curState     : EFSM!AbstractState = 0;
helper def : iniState     : EFSM!AbstractState = 0;
helper def : order        : Integer = 0;
helper def : firstOp      : Integer = 1;
helper def : firstOp2     : Integer = 1;
helper def : firstOp3     : Integer = 1;
helper def : firstOp4     : Integer = 1;
helper def : firstOpe     : Integer = 1;
helper def : firstOpe2    : Integer = 1;
helper def : firstOpe3    : Integer = 1;
helper def : firstOpe4    : Integer = 1;
helper def : eventName    : String = '';
helper def : eventReturn  : String = '';
helper def : eventClass   : String = '';
helper def : argName      : String = '';
helper def : argType      : String = '';
helper def : inputName    : String = '';
helper def : inputVarName : String = '';
helper def : inputVarType : String = '';
helper def : inputVarClass: String = '';
helper def : output       : String = '';
helper def : guard        : String = '';
helper def : action       : String = '';
helper def : source       : EFSM!AbstractState = 0;
helper def : target       : EFSM!AbstractState = 0;
helper def : cfState      : EFSM!AbstractState = 0;
helper def : cfState2     : EFSM!AbstractState = 0;
helper def : cfState3     : EFSM!AbstractState = 0;
helper def : cfState4     : EFSM!AbstractState = 0;
helper def : cfStatePre   : EFSM!AbstractState = 0;
helper def : cfStatePre2  : EFSM!AbstractState = 0;
helper def : cfStatePre3  : EFSM!AbstractState = 0;
helper def : cfStatePre4  : EFSM!AbstractState = 0;
helper def : cfStateCur   : EFSM!AbstractState = 0;
helper def : cfStateCur2   : EFSM!AbstractState = 0;
helper def : cfStateCur3   : EFSM!AbstractState = 0;
helper def : cfStateCur4   : EFSM!AbstractState = 0;
helper def : cfStateLas   : EFSM!AbstractState = 0;
helper def : cfStateLas2  : EFSM!AbstractState = 0;
helper def : cfStateLas3  : EFSM!AbstractState = 0;
helper def : cfStateLas4  : EFSM!AbstractState = 0;

rule SequenceDiagram2EFSM {
	from s  : SequenceDiagram!SequenceDiagram
	to   e  : EFSM!EFSM
	
	do {
		-- InitEfsm
		for (lfl in s.lifeLines -> select(lfl | lfl.start = true)) {
			e.initialstate <- thisModule.LrInitialState(lfl);
			e.name <- s.name;
			thisModule.iniState <- e.initialstate;
		}
		-- Selection of fragments
		for (fra in s.fragments) {
			-- Messages
        	if (fra.oclIsTypeOf(SequenceDiagram!Message)){
        		if (fra.type.toString() = 'op'){
        			-- Rule ContextVariable
        			if (fra.operation.returnType <> 'void'){
        				e.contextVariables <- thisModule.LrContextVariable(fra.operation);
        			}
        			-- Rule Transition
        			e.states <- thisModule.LrState(fra);        			
        			thisModule.source <- thisModule.preState;
        			thisModule.target <- thisModule.curState;
        			if (fra.operation.returnType <> 'void'){
        			  thisModule.output <- fra.operation.returnVariable+' ';
        			}
        			else{
        			  thisModule.output <- '';
        			  thisModule.guard <- '';
        			  thisModule.action <- '';
        			}
        			e.transitions <- thisModule.LrTransition(fra);
					
		 			for (tra in e.transitions -> select(tra | tra.name = thisModule.source.name+'->'+thisModule.target.name)) {
		 				thisModule.eventName <- fra.name;
        				thisModule.eventReturn <- fra.operation.returnType;
        				thisModule.eventClass <- fra.target.name.toString();
		 				tra.event <- thisModule.LrTransitionEvent(tra);

		 				thisModule.inputName <- fra.name;
		 				tra.input <- thisModule.LrTransitionInput(tra);
		 				
        				for (a in fra.operation.args){
        					thisModule.argName <- a.argName;
        					thisModule.argType <- a.argType;
        					tra.event.args <-  thisModule.LrTransitionEventArg(tra.event);
        					
        					thisModule.inputVarName <- a.argName;
        					thisModule.inputVarType <- a.argType;
        					thisModule.inputVarClass <- a.lifeline.name;
        					tra.input.variables <-  thisModule.LrTransitionInputVar(tra.input);
        				}
		 			}	
        		}
        		if (fra.type.toString() = 'si'){
        			-- Rule Transition
        			e.states <- thisModule.LrState(fra);
		 			thisModule.source <- thisModule.preState;
		 			thisModule.target <- thisModule.curState;
        			thisModule.output <- '';
        			thisModule.guard <- '';
        			thisModule.action <- '';
		 			e.transitions <- thisModule.LrTransition(fra);
		 			for (tra in e.transitions -> select(tra | tra.name = thisModule.source.name+'->'+thisModule.target.name)) {
		 				thisModule.inputName <- fra.name;
		 				tra.input <- thisModule.LrTransitionInput(tra);
		 			}
		 			if (thisModule.cfStateLas <> 0){
		 				thisModule.source <- thisModule.cfStateLas;
		 				thisModule.target <- thisModule.curState;
        				thisModule.output <- '';
        				thisModule.guard <- '';
        				thisModule.action <- '';
		 				e.transitions <- thisModule.LrTransition(fra);
		 				for (tra in e.transitions -> select(tra | tra.name = thisModule.source.name+'->'+thisModule.target.name)) {
		 					thisModule.inputName <- fra.name;
		 					tra.input <- thisModule.LrTransitionInput(tra);
		 				}
		 				thisModule.cfStateLas <- 0;
		 			}
        		}
        	}
			-- CombinedFragment
			if (fra.oclIsTypeOf(SequenceDiagram!CombinedFragment)) {
				-- rule loop
				if (fra.interactionOperator.toString() = 'loop'){
			 		thisModule.cfState <- thisModule.curState;
			 		for (op in fra.operands){
						-- Second Level
						for (fra2 in op.fragOpds){
							if (fra2.oclIsTypeOf(SequenceDiagram!Message)){
								if (fra2.type.toString() = 'op'){
									-- Rule ContextVariable
									if (fra2.operation.returnType <> 'void'){
										e.contextVariables <- thisModule.LrContextVariable(fra2.operation);
									}
									-- Rule Transition
									e.states <- thisModule.LrState(fra2);									
									thisModule.source <- thisModule.preState;
									thisModule.target <- thisModule.curState;
									if (fra2.operation.returnType <> 'void'){
										thisModule.output <- fra2.operation.returnVariable+' ';
									}
									else{
										thisModule.output <- '';
									}
									thisModule.guard <- '';
									thisModule.action <- '';
									e.transitions <- thisModule.LrTransition(fra2);

									for (tra in e.transitions -> select(tra | tra.name = thisModule.source.name+'->'+thisModule.target.name)) {
										thisModule.eventName <- fra2.name;
										thisModule.eventReturn <- fra2.operation.returnType;
										thisModule.eventClass <- fra2.target.name.toString();
										tra.event <- thisModule.LrTransitionEvent(tra);

										thisModule.inputName <- fra2.name;
										tra.input <- thisModule.LrTransitionInput(tra);
							
										for (a in fra2.operation.args){
											thisModule.argName <- a.argName;
											thisModule.argType <- a.argType;
											tra.event.args <-  thisModule.LrTransitionEventArg(tra.event);
											
											thisModule.inputVarName <- a.argName;
											thisModule.inputVarType <- a.argType;
											thisModule.inputVarClass <- a.lifeline.name;
											tra.input.variables <- thisModule.LrTransitionInputVar(tra.input);
										}
									}
								}
								if (fra2.type.toString() = 'si'){
									-- Rule Transition
									e.states <- thisModule.LrState(fra2);
									thisModule.source <- thisModule.preState;
									thisModule.target <- thisModule.curState;
									thisModule.output <- '';
									thisModule.guard <- '';
									thisModule.action <- '';
									e.transitions <- thisModule.LrTransition(fra2);
									for (tra in e.transitions -> select(tra | tra.name = thisModule.source.name+'->'+thisModule.target.name)) {
										thisModule.inputName <- fra2.name;
										tra.input <- thisModule.LrTransitionInput(tra);
									}								
								}
								if ((fra2.type.toString() = 're') and (op.guard.startsWith(fra2.name) = true)){
									for (tra in e.transitions -> select(tra | tra.target = thisModule.curState)) {
										tra.output <- 'not ('+op.guard+')';
										tra.guard <- '! ('+op.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ')+')';
										tra.action <- 'not ('+op.guard+')';										
										-- Rule Transition
										thisModule.source <- thisModule.preState;
										thisModule.target <- thisModule.cfState;
										thisModule.output <- op.guard;
										thisModule.guard <- op.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
										thisModule.action <- op.guard;
										e.transitions <- thisModule.LrTransition(fra2);
										
										for (t in e.transitions -> select(t | t.name = thisModule.source.name+'->'+thisModule.target.name)) {
											thisModule.eventName <- tra.event.name;
											thisModule.eventReturn <- tra.event.return;
											thisModule.eventClass <- tra.event.class;
											t.event <- thisModule.LrTransitionEvent(t);
										
											for (arg in tra.event.args) {
												thisModule.argName <- arg.argName;
												thisModule.argType <- arg.argType;
												t.event.args <-  thisModule.LrTransitionEventArg(t.event);
											}
									   
											thisModule.inputName <- tra.input.name;
											t.input <- thisModule.LrTransitionInput(t);
											
											for (var in tra.input.variables) {
												thisModule.inputVarName <- var.name;
												thisModule.inputVarType <- var.type;
												thisModule.inputVarClass <- var.class;
												t.input.variables <-  thisModule.LrTransitionInputVar(t.input);
											}
										}
									}        						
								}
							}
							-- CombinedFragment
							if (fra2.oclIsTypeOf(SequenceDiagram!CombinedFragment)) {
								-- rule loop
								if (fra2.interactionOperator.toString() = 'loop'){
									thisModule.cfState2 <- thisModule.curState;
									for (op2 in fra2.operands){
										-- Third Level
										for (fra3 in op2.fragOpds){
											if (fra3.oclIsTypeOf(SequenceDiagram!Message)){
												if (fra3.type.toString() = 'op'){
													-- Rule ContextVariable
													if (fra3.operation.returnType <> 'void'){
														e.contextVariables <- thisModule.LrContextVariable(fra3.operation);
													}
													-- Rule Transition
													e.states <- thisModule.LrState(fra3);													
													thisModule.source <- thisModule.preState;
													thisModule.target <- thisModule.curState;
													if (fra3.operation.returnType <> 'void'){
														thisModule.output <- fra3.operation.returnVariable+' ';
													}
													else{
														thisModule.output <- '';
													}
													thisModule.guard <- '';
													thisModule.action <- '';
													e.transitions <- thisModule.LrTransition(fra3);

													for (tra2 in e.transitions -> select(tra2 | tra2.name = thisModule.source.name+'->'+thisModule.target.name)) {
														thisModule.eventName <- fra3.name;
														thisModule.eventReturn <- fra3.operation.returnType;
														thisModule.eventClass <- fra3.target.name.toString();
														tra2.event <- thisModule.LrTransitionEvent(tra2);

														thisModule.inputName <- fra3.name;
														tra2.input <- thisModule.LrTransitionInput(tra2);
											
														for (a2 in fra3.operation.args){
															thisModule.argName <- a2.argName;
															thisModule.argType <- a2.argType;
															tra2.event.args <-  thisModule.LrTransitionEventArg(tra2.event);
															
															thisModule.inputVarName <- a2.argName;
															thisModule.inputVarType <- a2.argType;
															thisModule.inputVarClass <- a2.lifeline.name;
															tra2.input.variables <- thisModule.LrTransitionInputVar(tra2.input);
														}
													}
												}
												if (fra3.type.toString() = 'si'){
													-- Rule Transition
													e.states <- thisModule.LrState(fra3);
													thisModule.source <- thisModule.preState;
													thisModule.target <- thisModule.curState;
													thisModule.output <- '';
													thisModule.guard <- '';
													thisModule.action <- '';
													e.transitions <- thisModule.LrTransition(fra3);
													for (tra2 in e.transitions -> select(tra2 | tra2.name = thisModule.source.name+'->'+thisModule.target.name)) {
														thisModule.inputName <- fra3.name;
														tra2.input <- thisModule.LrTransitionInput(tra2);
													}								
												}
												if ((fra3.type.toString() = 're') and (op2.guard.startsWith(fra3.name) = true)){
													for (tra2 in e.transitions -> select(tra2 | tra2.target = thisModule.curState)) {
														tra2.output <- 'not ('+op2.guard+')';
														tra2.guard <- '! ('+op2.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ')+')';
														tra2.action <- 'not ('+op2.guard+')';
														-- Rule Transition
														thisModule.source <- thisModule.preState;
														thisModule.target <- thisModule.cfState2;
														thisModule.output <- op2.guard;
														thisModule.guard <- op2.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
														thisModule.action <- op2.guard;
														e.transitions <- thisModule.LrTransition(fra3);
														
														for (t2 in e.transitions -> select(t2 | t2.name = thisModule.source.name+'->'+thisModule.target.name)) {
															thisModule.eventName <- tra2.event.name;
															thisModule.eventReturn <- tra2.event.return;
															thisModule.eventClass <- tra2.event.class;
															t2.event <- thisModule.LrTransitionEvent(t2);
														
															for (arg2 in tra2.event.args) {
																thisModule.argName <- arg2.argName;
																thisModule.argType <- arg2.argType;
																t2.event.args <-  thisModule.LrTransitionEventArg(t2.event);
															}
													   
															thisModule.inputName <- tra2.input.name;
															t2.input <- thisModule.LrTransitionInput(t2);
															
															for (var2 in tra2.input.variables) {
																thisModule.inputVarName <- var2.name;
																thisModule.inputVarType <- var2.type;
																thisModule.inputVarClass <- var2.class;
																t2.input.variables <-  thisModule.LrTransitionInputVar(t2.input);
															}
														}
													}        						
												}
											}
											-- CombinedFragment
											if (fra3.oclIsTypeOf(SequenceDiagram!CombinedFragment)){
												-- rule loop
												if (fra3.interactionOperator.toString() = 'loop'){
													thisModule.cfState3 <- thisModule.curState;
													for (op3 in fra3.operands){
														-- Fourth Level
														for (fra4 in op3.fragOpds) {
															if (fra4.oclIsTypeOf(SequenceDiagram!Message)){
																if (fra4.type.toString() = 'op'){
																	-- Rule ContextVariable
																	if (fra4.operation.returnType <> 'void'){
																		e.contextVariables <- thisModule.LrContextVariable(fra4.operation);
																	}
																	-- Rule Transition
																	e.states <- thisModule.LrState(fra4);																	
																	thisModule.source <- thisModule.preState;
																	thisModule.target <- thisModule.curState;
																	if (fra4.operation.returnType <> 'void'){
																		thisModule.output <- fra4.operation.returnVariable+' ';
																	}
																	else{
																		thisModule.output <- '';
																	}
																	thisModule.guard <- '';
																	thisModule.action <- '';
																	e.transitions <- thisModule.LrTransition(fra4);

																	for (tra3 in e.transitions -> select(tra3 | tra3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																		thisModule.eventName <- fra4.name;
																		thisModule.eventReturn <- fra4.operation.returnType;
																		thisModule.eventClass <- fra4.target.name.toString();
																		tra3.event <- thisModule.LrTransitionEvent(tra3);

																		thisModule.inputName <- fra4.name;
																		tra3.input <- thisModule.LrTransitionInput(tra3);
															
																		for (a3 in fra4.operation.args){
																			thisModule.argName <- a3.argName;
																			thisModule.argType <- a3.argType;
																			tra3.event.args <-  thisModule.LrTransitionEventArg(tra3.event);
																			
																			thisModule.inputVarName <- a3.argName;
																			thisModule.inputVarType <- a3.argType;
																			thisModule.inputVarClass <- a3.lifeline.name;
																			tra3.input.variables <- thisModule.LrTransitionInputVar(tra3.input);
																		}
																	}
																}
																if (fra4.type.toString() = 'si'){
																	-- Rule Transition
																	e.states <- thisModule.LrState(fra4);
																	thisModule.source <- thisModule.preState;
																	thisModule.target <- thisModule.curState;
																	thisModule.output <- '';
																	thisModule.guard <- '';
																	thisModule.action <- '';
																	e.transitions <- thisModule.LrTransition(fra4);
																	for (tra3 in e.transitions -> select(tra3 | tra3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																		thisModule.inputName <- fra4.name;
																		tra3.input <- thisModule.LrTransitionInput(tra3);
																	}								
																}
																if ((fra4.type.toString() = 're') and (op3.guard.startsWith(fra4.name) = true)){
																	for (tra3 in e.transitions -> select(tra3 | tra3.target = thisModule.curState)) {
																		tra3.output <- 'not ('+op3.guard+')';
																		tra3.guard <- '! ('+op3.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ')+')';
																		tra3.action <- 'not ('+op3.guard+')';																		
																		-- Rule Transition
																		thisModule.source <- thisModule.preState;
																		thisModule.target <- thisModule.cfState3;
																		thisModule.output <- op3.guard;
																		thisModule.guard <- op3.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																		thisModule.action <- op3.guard;
																		e.transitions <- thisModule.LrTransition(fra4);
																		
																		for (t3 in e.transitions -> select(t3 | t3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																			thisModule.eventName <- tra3.event.name;
																			thisModule.eventReturn <- tra3.event.return;
																			thisModule.eventClass <- tra3.event.class;
																			t3.event <- thisModule.LrTransitionEvent(t3);
																		
																			for (arg3 in tra3.event.args) {
																				thisModule.argName <- arg3.argName;
																				thisModule.argType <- arg3.argType;
																				t3.event.args <-  thisModule.LrTransitionEventArg(t3.event);
																			}
																	   
																			thisModule.inputName <- tra3.input.name;
																			t3.input <- thisModule.LrTransitionInput(t3);
																			
																			for (var3 in tra3.input.variables) {
																				thisModule.inputVarName <- var3.name;
																				thisModule.inputVarType <- var3.type;
																				thisModule.inputVarClass <- var3.class;
																				t3.input.variables <-  thisModule.LrTransitionInputVar(t3.input);
																			}
																		}
																	}        						
																}
															}	
															-- CombinedFragment
															if (fra4.oclIsTypeOf(SequenceDiagram!CombinedFragment)) {
																-- rule loop
																if (fra4.interactionOperator.toString() = 'loop'){
																	thisModule.cfState3 <- thisModule.curState;
																	for (op4 in fra4.operands){
																		for (msg4 in op4.fragOpds -> select(msg4 | msg4.oclIsTypeOf(SequenceDiagram!Message))){
																			if (msg4.type.toString() = 'op'){
																				-- Rule ContextVariable
																				if (msg4.operation.returnType <> 'void'){
																					e.contextVariables <- thisModule.LrContextVariable(msg4.operation);
																				}
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);																					
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				if (msg4.operation.returnType <> 'void'){
																					thisModule.output <- msg4.operation.returnVariable+' ';
																				}
																				else{
																					thisModule.output <- '';
																				}
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);

																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.eventName <- msg4.name;
																					thisModule.eventReturn <- msg4.operation.returnType;
																					thisModule.eventClass <- msg4.target.name.toString();
																					tra4.event <- thisModule.LrTransitionEvent(tra4);

																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																			
																					for (a4 in msg4.operation.args){
																						thisModule.argName <- a4.argName;
																						thisModule.argType <- a4.argType;
																						tra4.event.args <-  thisModule.LrTransitionEventArg(tra4.event);
																							
																						thisModule.inputVarName <- a4.argName;
																						thisModule.inputVarType <- a4.argType;
																						thisModule.inputVarClass <- a4.lifeline.name;
																						tra4.input.variables <- thisModule.LrTransitionInputVar(tra4.input);
																					}
																				}
																			}
																			if (msg4.type.toString() = 'si'){
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- '';
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);
																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																				}								
																			}
																			if ((msg4.type.toString() = 're') and (op4.guard.startsWith(msg4.name) = true)){
																				for (tra4 in e.transitions -> select(tra4 | tra4.target = thisModule.curState)) {
																					tra4.output <- 'not ('+op4.guard+')';
																					tra4.guard <- '! ('+op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ')+')';
																					tra4.action <- 'not ('+op4.guard+')';																					
																					-- Rule Transition
																					thisModule.source <- thisModule.preState;
																					thisModule.target <- thisModule.cfState4;
																					thisModule.output <- op4.guard;
																					thisModule.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																					thisModule.action <- op4.guard;
																					e.transitions <- thisModule.LrTransition(msg4);
																						
																					for (t4 in e.transitions -> select(t4 | t4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																						thisModule.eventName <- tra4.event.name;
																						thisModule.eventReturn <- tra4.event.return;
																						thisModule.eventClass <- tra4.event.class;
																						t4.event <- thisModule.LrTransitionEvent(t4);
																					
																						for (arg4 in tra4.event.args) {
																							thisModule.argName <- arg4.argName;
																							thisModule.argType <- arg4.argType;
																							t4.event.args <-  thisModule.LrTransitionEventArg(t4.event);
																						}
																					   
																						thisModule.inputName <- tra4.input.name;
																						t4.input <- thisModule.LrTransitionInput(t4);
																							
																						for (var4 in tra4.input.variables) {
																							thisModule.inputVarName <- var4.name;
																							thisModule.inputVarType <- var4.type;
																							thisModule.inputVarClass <- var4.class;
																							t4.input.variables <-  thisModule.LrTransitionInputVar(t4.input);
																						}
																					}
																				}        						
																			}
																		}
																	}
																}
																-- Rule alt or role opt
																if (fra4.interactionOperator.toString() = 'alt' or fra4.interactionOperator.toString() = 'opt'){
																	thisModule.firstOp4 <- 1;
																	thisModule.cfState4 <- thisModule.preState;
																	thisModule.cfStatePre4 <- thisModule.preState;
																	thisModule.cfStateCur4 <- thisModule.curState;
																	for (op4 in fra4.operands){
																		for (tra4 in e.transitions -> select(tra4 | tra4.source = thisModule.cfStatePre4 and tra4.target = thisModule.cfStateCur4)){	
																			if (thisModule.firstOp4 >= 1){
																				tra4.output <- op4.guard;
																				tra4.guard <- op4.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																				tra4.action <- op4.guard;
																				thisModule.firstOp4 <- 0;
																			}
																			else{
																				-- Rule Transition
																				e.states <- thisModule.LrState();
																				thisModule.source <- thisModule.cfState4;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- op4.guard;
																				thisModule.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																				thisModule.action <- op4.guard;
																				e.transitions <- thisModule.LrTransition();
																					
																				for (t4 in e.transitions -> select(t4 | t4.name = thisModule.source.name+'->'+thisModule.target.name)){
																					thisModule.eventName <- tra4.event.name;
																					thisModule.eventReturn <- tra4.event.return;
																					thisModule.eventClass <- tra4.event.class;
																					t4.event <- thisModule.LrTransitionEvent(t4);
																							
																					for (arg4 in tra4.event.args) {
																						thisModule.argName <- arg4.argName;
																						thisModule.argType <- arg4.argType;
																						t4.event.args <- thisModule.LrTransitionEventArg(t4.event);
																					}
																					
																					thisModule.inputName <- tra4.input.name;
																					t4.input <- thisModule.LrTransitionInput(t4);
																							
																					for (var4 in tra4.input.variables) {
																						thisModule.inputVarName <- var4.name;
																						thisModule.inputVarType <- var4.type;
																						thisModule.inputVarClass <- var4.class;
																						t4.input.variables <-  thisModule.LrTransitionInputVar(t4.input);
																					}
																				}
																			}
																		}
																		for (msg4 in op4.fragOpds -> select(msg4 | msg4.oclIsTypeOf(SequenceDiagram!Message))){
																			if (msg4.type.toString() = 'op'){
																				-- Rule ContextVariable
																				if (msg4.operation.returnType <> 'void'){
																					e.contextVariables <- thisModule.LrContextVariable(msg4.operation);
																				}
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);					
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				if (msg4.operation.returnType <> 'void'){
																					thisModule.output <- msg4.operation.returnVariable+' ';
																				}
																				else{
																					thisModule.output <- '';
																				}
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);

																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.eventName <- msg4.name;
																					thisModule.eventReturn <- msg4.operation.returnType;
																					thisModule.eventClass <- msg4.target.name.toString();
																					tra4.event <- thisModule.LrTransitionEvent(tra4);

																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);	 				

																					for (a4 in msg4.operation.args){
																						thisModule.argName <- a4.argName;
																						thisModule.argType <- a4.argType;
																						tra4.event.args <-  thisModule.LrTransitionEventArg(tra4.event);
																							
																						thisModule.inputVarName <- a4.argName;
																						thisModule.inputVarType <- a4.argType;
																						thisModule.inputVarClass <- a4.lifeline.name;
																						tra4.input.variables <-  thisModule.LrTransitionInputVar(tra4.input);
																					}
																				}
																			}
																			if (msg4.type.toString() = 'si'){
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- '';
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);
																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																				}								
																			}
																		}
																		if (thisModule.firstOpe4 >= 1){
																			thisModule.cfStateLas4 <- thisModule.curState;
																			thisModule.firstOpe4 <- 0;
																		}
																	}
																}
															}
														}	
														-- Fourth Level - End
													}
												}
												-- Rule alt or role opt
												if (fra3.interactionOperator.toString() = 'alt' or fra3.interactionOperator.toString() = 'opt'){
													thisModule.firstOp3 <- 1;
													thisModule.cfState3 <- thisModule.preState;
													thisModule.cfStatePre3 <- thisModule.preState;
													thisModule.cfStateCur3 <- thisModule.curState;
													for (op3 in fra3.operands){
														for (tra3 in e.transitions -> select(tra3 | tra3.source = thisModule.cfStatePre3 and tra3.target = thisModule.cfStateCur3)){	
															if (thisModule.firstOp3 >= 1){
																tra3.output <- op3.guard;
																tra3.guard <- op3.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																tra3.action <- op3.guard;
																thisModule.firstOp3 <- 0;
															}
															else{
																-- Rule Transition
																e.states <- thisModule.LrState();
																thisModule.source <- thisModule.cfState3;
																thisModule.target <- thisModule.curState;
																thisModule.output <- op3.guard;
																thisModule.guard <- op3.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																thisModule.action <- op3.guard;
																e.transitions <- thisModule.LrTransition();
																
																for (t3 in e.transitions -> select(t3 | t3.name = thisModule.source.name+'->'+thisModule.target.name)){
																	thisModule.eventName <- tra3.event.name;
																	thisModule.eventReturn <- tra3.event.return;
																	thisModule.eventClass <- tra3.event.class;
																	t3.event <- thisModule.LrTransitionEvent(t3);
																		
																	for (arg3 in tra3.event.args) {
																		thisModule.argName <- arg3.argName;
																		thisModule.argType <- arg3.argType;
																		t3.event.args <- thisModule.LrTransitionEventArg(t3.event);
																	}
																
																	thisModule.inputName <- tra3.input.name;
																	t3.input <- thisModule.LrTransitionInput(t3);
																		
																	for (var3 in tra3.input.variables) {
																		thisModule.inputVarName <- var3.name;
																		thisModule.inputVarType <- var3.type;
																		thisModule.inputVarClass <- var3.class;
																		t3.input.variables <-  thisModule.LrTransitionInputVar(t3.input);
																	}
																}
															}
														}
														-- Fourth Level
														for (fra4 in op3.fragOpds){
															if (fra4.oclIsTypeOf(SequenceDiagram!Message)){
																if (fra4.type.toString() = 'op'){
																	-- Rule ContextVariable
																	if (fra4.operation.returnType <> 'void'){
																		e.contextVariables <- thisModule.LrContextVariable(fra4.operation);
																	}
																	-- Rule Transition
																	e.states <- thisModule.LrState(fra4);																	
																	thisModule.source <- thisModule.preState;
																	thisModule.target <- thisModule.curState;
																	if (fra4.operation.returnType <> 'void'){
																		thisModule.output <- fra4.operation.returnVariable+' ';
																	}
																	else{
																		thisModule.output <- '';
																	}
																	thisModule.guard <- '';
																	thisModule.action <- '';
																	e.transitions <- thisModule.LrTransition(fra4);

																	for (tra3 in e.transitions -> select(tra3 | tra3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																		thisModule.eventName <- fra4.name;
																		thisModule.eventReturn <- fra4.operation.returnType;
																		thisModule.eventClass <- fra4.target.name.toString();
																		tra3.event <- thisModule.LrTransitionEvent(tra3);

																		thisModule.inputName <- fra4.name;
																		tra3.input <- thisModule.LrTransitionInput(tra3);	 				

																		for (a3 in fra4.operation.args){
																			thisModule.argName <- a3.argName;
																			thisModule.argType <- a3.argType;
																			tra3.event.args <-  thisModule.LrTransitionEventArg(tra3.event);
																			
																			thisModule.inputVarName <- a3.argName;
																			thisModule.inputVarType <- a3.argType;
																			thisModule.inputVarClass <- a3.lifeline.name;
																			tra3.input.variables <-  thisModule.LrTransitionInputVar(tra3.input);
																		}
																	}
																}
																if (fra4.type.toString() = 'si'){
																	-- Rule Transition
																	e.states <- thisModule.LrState(fra4);
																	thisModule.source <- thisModule.preState;
																	thisModule.target <- thisModule.curState;
																	thisModule.output <- '';
																	thisModule.guard <- '';
																	thisModule.action <- '';
																	e.transitions <- thisModule.LrTransition(fra4);
																	for (tra3 in e.transitions -> select(tra3 | tra3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																		thisModule.inputName <- fra4.name;
																		tra3.input <- thisModule.LrTransitionInput(tra3);
																	}								
																}
															}
															-- CombinedFragment
															if (fra4.oclIsTypeOf(SequenceDiagram!CombinedFragment)) {
																-- rule loop
																if (fra4.interactionOperator.toString() = 'loop'){
																	thisModule.cfState3 <- thisModule.curState;
																	for (op4 in fra4.operands){
																		for (msg4 in op4.fragOpds -> select(msg4 | msg4.oclIsTypeOf(SequenceDiagram!Message))){
																			if (msg4.type.toString() = 'op'){
																				-- Rule ContextVariable
																				if (msg4.operation.returnType <> 'void'){
																					e.contextVariables <- thisModule.LrContextVariable(msg4.operation);
																				}
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);																					
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				if (msg4.operation.returnType <> 'void'){
																					thisModule.output <- msg4.operation.returnVariable+' ';
																				}
																				else{
																					thisModule.output <- '';
																				}
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);

																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.eventName <- msg4.name;
																					thisModule.eventReturn <- msg4.operation.returnType;
																					thisModule.eventClass <- msg4.target.name.toString();
																					tra4.event <- thisModule.LrTransitionEvent(tra4);

																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																			
																					for (a4 in msg4.operation.args){
																						thisModule.argName <- a4.argName;
																						thisModule.argType <- a4.argType;
																						tra4.event.args <-  thisModule.LrTransitionEventArg(tra4.event);
																							
																						thisModule.inputVarName <- a4.argName;
																						thisModule.inputVarType <- a4.argType;
																						thisModule.inputVarClass <- a4.lifeline.name;
																						tra4.input.variables <- thisModule.LrTransitionInputVar(tra4.input);
																					}
																				}
																			}
																			if (msg4.type.toString() = 'si'){
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- '';
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);
																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																				}								
																			}
																			if ((msg4.type.toString() = 're') and (op4.guard.startsWith(msg4.name) = true)){
																				for (tra4 in e.transitions -> select(tra4 | tra4.target = thisModule.curState)) {
																					tra4.output <- 'not ('+op4.guard+')';
																					tra4.guard <- '! ('+op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ')+')';
																					tra4.action <- 'not ('+op4.guard+')';																																									
																					-- Rule Transition
																					thisModule.source <- thisModule.preState;
																					thisModule.target <- thisModule.cfState4;
																					thisModule.output <- op4.guard;
																					thisModule.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																					thisModule.action <- op4.guard;
																					e.transitions <- thisModule.LrTransition(msg4);
																						
																					for (t4 in e.transitions -> select(t4 | t4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																						thisModule.eventName <- tra4.event.name;
																						thisModule.eventReturn <- tra4.event.return;
																						thisModule.eventClass <- tra4.event.class;
																						t4.event <- thisModule.LrTransitionEvent(t4);
																					
																						for (arg4 in tra4.event.args) {
																							thisModule.argName <- arg4.argName;
																							thisModule.argType <- arg4.argType;
																							t4.event.args <-  thisModule.LrTransitionEventArg(t4.event);
																						}
																					   
																						thisModule.inputName <- tra4.input.name;
																						t4.input <- thisModule.LrTransitionInput(t4);
																							
																						for (var4 in tra4.input.variables) {
																							thisModule.inputVarName <- var4.name;
																							thisModule.inputVarType <- var4.type;
																							thisModule.inputVarClass <- var4.class;
																							t4.input.variables <-  thisModule.LrTransitionInputVar(t4.input);
																						}
																					}
																				}        						
																			}
																		}
																	}
																}
																-- Rule alt or role opt
																if (fra4.interactionOperator.toString() = 'alt' or fra4.interactionOperator.toString() = 'opt'){
																	thisModule.firstOp4 <- 1;
																	thisModule.cfState4 <- thisModule.preState;
																	thisModule.cfStatePre4 <- thisModule.preState;
																	thisModule.cfStateCur4 <- thisModule.curState;
																	for (op4 in fra4.operands){
																		for (tra4 in e.transitions -> select(tra4 | tra4.source = thisModule.cfStatePre4 and tra4.target = thisModule.cfStateCur4)){	
																			if (thisModule.firstOp4 >= 1){
																				tra4.output <- op4.guard;
																				tra4.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																				tra4.action <- op4.guard;
																				thisModule.firstOp4 <- 0;
																			}
																			else{
																				-- Rule Transition
																				e.states <- thisModule.LrState();
																				thisModule.source <- thisModule.cfState4;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- op4.guard;
																				thisModule.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																				thisModule.action <- op4.guard;
																				e.transitions <- thisModule.LrTransition();
																					
																				for (t4 in e.transitions -> select(t4 | t4.name = thisModule.source.name+'->'+thisModule.target.name)){
																					thisModule.eventName <- tra4.event.name;
																					thisModule.eventReturn <- tra4.event.return;
																					thisModule.eventClass <- tra4.event.class;
																					t4.event <- thisModule.LrTransitionEvent(t4);
																							
																					for (arg4 in tra4.event.args) {
																						thisModule.argName <- arg4.argName;
																						thisModule.argType <- arg4.argType;
																						t4.event.args <- thisModule.LrTransitionEventArg(t4.event);
																					}
																					
																					thisModule.inputName <- tra4.input.name;
																					t4.input <- thisModule.LrTransitionInput(t4);
																							
																					for (var4 in tra4.input.variables) {
																						thisModule.inputVarName <- var4.name;
																						thisModule.inputVarType <- var4.type;
																						thisModule.inputVarClass <- var4.class;
																						t4.input.variables <-  thisModule.LrTransitionInputVar(t4.input);
																					}
																				}
																			}
																		}
																		for (msg4 in op4.fragOpds -> select(msg4 | msg4.oclIsTypeOf(SequenceDiagram!Message))){
																			if (msg4.type.toString() = 'op'){
																				-- Rule ContextVariable
																				if (msg4.operation.returnType <> 'void'){
																					e.contextVariables <- thisModule.LrContextVariable(msg4.operation);
																				}
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																					
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				if (msg4.operation.returnType <> 'void'){
																					thisModule.output <- msg4.operation.returnVariable+' ';
																				}
																				else{
																					thisModule.output <- '';
																				}
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);

																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.eventName <- msg4.name;
																					thisModule.eventReturn <- msg4.operation.returnType;
																					thisModule.eventClass <- msg4.target.name.toString();
																					tra4.event <- thisModule.LrTransitionEvent(tra4);

																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);	 				

																					for (a4 in msg4.operation.args){
																						thisModule.argName <- a4.argName;
																						thisModule.argType <- a4.argType;
																						tra4.event.args <-  thisModule.LrTransitionEventArg(tra4.event);
																							
																						thisModule.inputVarName <- a4.argName;
																						thisModule.inputVarType <- a4.argType;
																						thisModule.inputVarClass <- a4.lifeline.name;
																						tra4.input.variables <-  thisModule.LrTransitionInputVar(tra4.input);
																					}
																				}
																			}
																			if (msg4.type.toString() = 'si'){
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- '';
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);
																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																				}								
																			}
																		}
																		if (thisModule.firstOpe4 >= 1){
																			thisModule.cfStateLas4 <- thisModule.curState;
																			thisModule.firstOpe4 <- 0;
																		}
																	}
																}
															}
														}
														-- Fourth Level - End
														if (thisModule.firstOpe3 >= 1){
															thisModule.cfStateLas3 <- thisModule.curState;
															thisModule.firstOpe3 <- 0;
														}
													}
												}
											}
										}
										-- Third Level - End
									}
								}
								-- Rule alt or role opt
								if (fra2.interactionOperator.toString() = 'alt' or fra2.interactionOperator.toString() = 'opt'){
									thisModule.firstOp2 <- 1;
									thisModule.cfState2 <- thisModule.preState;
									thisModule.cfStatePre2 <- thisModule.preState;
									thisModule.cfStateCur2 <- thisModule.curState;
									for (op2 in fra2.operands){
										for (tra2 in e.transitions -> select(tra2 | tra2.source = thisModule.cfStatePre2 and tra2.target = thisModule.cfStateCur2)){	
											if (thisModule.firstOp2 >= 1){
												tra2.output <- op2.guard;
												tra2.guard <- op2.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
												tra2.action <- op2.guard;
												thisModule.firstOp2 <- 0;
											}
											else{
												-- Rule Transition
												e.states <- thisModule.LrState();
												thisModule.source <- thisModule.cfState2;
												thisModule.target <- thisModule.curState;
												thisModule.output <- op2.guard;
												thisModule.guard <- op2.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
												thisModule.action <- op2.guard;
												e.transitions <- thisModule.LrTransition();
												
												for (t2 in e.transitions -> select(t2 | t2.name = thisModule.source.name+'->'+thisModule.target.name)){
													thisModule.eventName <- tra2.event.name;
													thisModule.eventReturn <- tra2.event.return;
													thisModule.eventClass <- tra2.event.class;
													t2.event <- thisModule.LrTransitionEvent(t2);
														
													for (arg2 in tra2.event.args) {
														thisModule.argName <- arg2.argName;
														thisModule.argType <- arg2.argType;
														t2.event.args <- thisModule.LrTransitionEventArg(t2.event);
													}
												
													thisModule.inputName <- tra2.input.name;
													t2.input <- thisModule.LrTransitionInput(t2);
														
													for (var2 in tra2.input.variables) {
														thisModule.inputVarName <- var2.name;
														thisModule.inputVarType <- var2.type;
														thisModule.inputVarClass <- var2.class;
														t2.input.variables <-  thisModule.LrTransitionInputVar(t2.input);
													}
												}
											}
										}
										for (fra3 in op2.fragOpds){
											-- Third Level
											if (fra3.oclIsTypeOf(SequenceDiagram!Message)){
												if (fra3.type.toString() = 'op'){
													-- Rule ContextVariable
													if (fra3.operation.returnType <> 'void'){
														e.contextVariables <- thisModule.LrContextVariable(fra3.operation);
													}
													-- Rule Transition
													e.states <- thisModule.LrState(fra3);
													
													thisModule.source <- thisModule.preState;
													thisModule.target <- thisModule.curState;
													if (fra3.operation.returnType <> 'void'){
														thisModule.output <- fra3.operation.returnVariable+' ';
													}
													else{
														thisModule.output <- '';
													}
													thisModule.guard <- '';
													thisModule.action <- '';
													e.transitions <- thisModule.LrTransition(fra3);

													for (tra2 in e.transitions -> select(tra2 | tra2.name = thisModule.source.name+'->'+thisModule.target.name)) {
														thisModule.eventName <- fra3.name;
														thisModule.eventReturn <- fra3.operation.returnType;
														thisModule.eventClass <- fra3.target.name.toString();
														tra2.event <- thisModule.LrTransitionEvent(tra2);

														thisModule.inputName <- fra3.name;
														tra2.input <- thisModule.LrTransitionInput(tra2);	 				

														for (a2 in fra3.operation.args){
															thisModule.argName <- a2.argName;
															thisModule.argType <- a2.argType;
															tra2.event.args <-  thisModule.LrTransitionEventArg(tra2.event);
															
															thisModule.inputVarName <- a2.argName;
															thisModule.inputVarType <- a2.argType;
															thisModule.inputVarClass <- a2.lifeline.name;
															tra2.input.variables <-  thisModule.LrTransitionInputVar(tra2.input);
														}
													}
												}
												if (fra3.type.toString() = 'si'){
													-- Rule Transition
													e.states <- thisModule.LrState(fra3);
													thisModule.source <- thisModule.preState;
													thisModule.target <- thisModule.curState;
													thisModule.output <- '';
													thisModule.guard <- '';
													thisModule.action <- '';
													e.transitions <- thisModule.LrTransition(fra3);
													for (tra2 in e.transitions -> select(tra2 | tra2.name = thisModule.source.name+'->'+thisModule.target.name)) {
														thisModule.inputName <- fra3.name;
														tra2.input <- thisModule.LrTransitionInput(tra2);
													}								
												}
											}
											-- CombinedFragment
											if (fra3.oclIsTypeOf(SequenceDiagram!CombinedFragment)) {
												-- rule loop
												if (fra3.interactionOperator.toString() = 'loop'){
													thisModule.cfState3 <- thisModule.curState;
													for (op3 in fra3.operands){
														for (fra4 in op3.fragOpds){
															if (fra4.oclIsTypeOf(SequenceDiagram!Message)){
																if (fra4.type.toString() = 'op'){
																	-- Rule ContextVariable
																	if (fra4.operation.returnType <> 'void'){
																		e.contextVariables <- thisModule.LrContextVariable(fra4.operation);
																	}
																	-- Rule Transition
																	e.states <- thisModule.LrState(fra4);
																	
																	thisModule.source <- thisModule.preState;
																	thisModule.target <- thisModule.curState;
																	if (fra4.operation.returnType <> 'void'){
																		thisModule.output <- fra4.operation.returnVariable+' ';
																	}
																	else{
																		thisModule.output <- '';
																	}
																	thisModule.guard <- '';
																	thisModule.action <- '';
																	e.transitions <- thisModule.LrTransition(fra4);

																	for (tra3 in e.transitions -> select(tra3 | tra3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																		thisModule.eventName <- fra4.name;
																		thisModule.eventReturn <- fra4.operation.returnType;
																		thisModule.eventClass <- fra4.target.name.toString();
																		tra3.event <- thisModule.LrTransitionEvent(tra3);

																		thisModule.inputName <- fra4.name;
																		tra3.input <- thisModule.LrTransitionInput(tra3);
															
																		for (a3 in fra4.operation.args){
																			thisModule.argName <- a3.argName;
																			thisModule.argType <- a3.argType;
																			tra3.event.args <-  thisModule.LrTransitionEventArg(tra3.event);
																			
																			thisModule.inputVarName <- a3.argName;
																			thisModule.inputVarType <- a3.argType;
																			thisModule.inputVarClass <- a3.lifeline.name;
																			tra3.input.variables <- thisModule.LrTransitionInputVar(tra3.input);
																		}
																	}
																}
																if (fra4.type.toString() = 'si'){
																	-- Rule Transition
																	e.states <- thisModule.LrState(fra4);
																	thisModule.source <- thisModule.preState;
																	thisModule.target <- thisModule.curState;
																	thisModule.output <- '';
																	thisModule.guard <- '';
																	thisModule.action <- '';
																	e.transitions <- thisModule.LrTransition(fra4);
																	for (tra3 in e.transitions -> select(tra3 | tra3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																		thisModule.inputName <- fra4.name;
																		tra3.input <- thisModule.LrTransitionInput(tra3);
																	}								
																}
																if ((fra4.type.toString() = 're') and (op3.guard.startsWith(fra4.name) = true)){
																	for (tra3 in e.transitions -> select(tra3 | tra3.target = thisModule.curState)) {
																		tra3.output <- 'not ('+op3.guard+')';
																		tra3.guard <- '! ('+op3.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ')+')';
																		tra3.action <- 'not ('+op3.guard+')';																	
																		-- Rule Transition
																		thisModule.source <- thisModule.preState;
																		thisModule.target <- thisModule.cfState3;
																		thisModule.output <- op3.guard;
																		thisModule.guard <- op3.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																		thisModule.action <- op3.guard;
																		e.transitions <- thisModule.LrTransition(fra4);
																		
																		for (t3 in e.transitions -> select(t3 | t3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																			thisModule.eventName <- tra3.event.name;
																			thisModule.eventReturn <- tra3.event.return;
																			thisModule.eventClass <- tra3.event.class;
																			t3.event <- thisModule.LrTransitionEvent(t3);
																		
																			for (arg3 in tra3.event.args) {
																				thisModule.argName <- arg3.argName;
																				thisModule.argType <- arg3.argType;
																				t3.event.args <-  thisModule.LrTransitionEventArg(t3.event);
																			}
																	   
																			thisModule.inputName <- tra3.input.name;
																			t3.input <- thisModule.LrTransitionInput(t3);
																			
																			for (var3 in tra3.input.variables) {
																				thisModule.inputVarName <- var3.name;
																				thisModule.inputVarType <- var3.type;
																				thisModule.inputVarClass <- var3.class;
																				t3.input.variables <-  thisModule.LrTransitionInputVar(t3.input);
																			}
																		}
																	}        						
																}
															}														
															-- Fourth Level
															-- CombinedFragment
															if (fra4.oclIsTypeOf(SequenceDiagram!CombinedFragment)) {
																-- rule loop
																if (fra4.interactionOperator.toString() = 'loop'){
																	thisModule.cfState3 <- thisModule.curState;
																	for (op4 in fra4.operands){
																		for (msg4 in op4.fragOpds -> select(msg4 | msg4.oclIsTypeOf(SequenceDiagram!Message))){
																			if (msg4.type.toString() = 'op'){
																				-- Rule ContextVariable
																				if (msg4.operation.returnType <> 'void'){
																					e.contextVariables <- thisModule.LrContextVariable(msg4.operation);
																				}
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																					
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				if (msg4.operation.returnType <> 'void'){
																					thisModule.output <- msg4.operation.returnVariable+' ';
																				}
																				else{
																					thisModule.output <- '';
																				}
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);

																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.eventName <- msg4.name;
																					thisModule.eventReturn <- msg4.operation.returnType;
																					thisModule.eventClass <- msg4.target.name.toString();
																					tra4.event <- thisModule.LrTransitionEvent(tra4);

																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																			
																					for (a4 in msg4.operation.args){
																						thisModule.argName <- a4.argName;
																						thisModule.argType <- a4.argType;
																						tra4.event.args <-  thisModule.LrTransitionEventArg(tra4.event);
																							
																						thisModule.inputVarName <- a4.argName;
																						thisModule.inputVarType <- a4.argType;
																						thisModule.inputVarClass <- a4.lifeline.name;
																						tra4.input.variables <- thisModule.LrTransitionInputVar(tra4.input);
																					}
																				}
																			}
																			if (msg4.type.toString() = 'si'){
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- '';
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);
																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																				}								
																			}
																			if ((msg4.type.toString() = 're') and (op4.guard.startsWith(msg4.name) = true)){
																				for (tra4 in e.transitions -> select(tra4 | tra4.target = thisModule.curState)) {
																					tra4.output <- 'not ('+op4.guard+')';
																					tra4.guard <- '! ('+op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ')+')';
																					tra4.action <- 'not ('+op4.guard+')';																					
																					-- Rule Transition
																					thisModule.source <- thisModule.preState;
																					thisModule.target <- thisModule.cfState4;
																					thisModule.output <- op4.guard;
																					thisModule.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																					thisModule.action <- op4.guard;
																					e.transitions <- thisModule.LrTransition(msg4);
																						
																					for (t4 in e.transitions -> select(t4 | t4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																						thisModule.eventName <- tra4.event.name;
																						thisModule.eventReturn <- tra4.event.return;
																						thisModule.eventClass <- tra4.event.class;
																						t4.event <- thisModule.LrTransitionEvent(t4);
																					
																						for (arg4 in tra4.event.args) {
																							thisModule.argName <- arg4.argName;
																							thisModule.argType <- arg4.argType;
																							t4.event.args <-  thisModule.LrTransitionEventArg(t4.event);
																						}
																					   
																						thisModule.inputName <- tra4.input.name;
																						t4.input <- thisModule.LrTransitionInput(t4);
																							
																						for (var4 in tra4.input.variables) {
																							thisModule.inputVarName <- var4.name;
																							thisModule.inputVarType <- var4.type;
																							thisModule.inputVarClass <- var4.class;
																							t4.input.variables <-  thisModule.LrTransitionInputVar(t4.input);
																						}
																					}
																				}        						
																			}
																		}
																	}
																}
																-- Rule alt or role opt
																if (fra4.interactionOperator.toString() = 'alt' or fra4.interactionOperator.toString() = 'opt'){
																	thisModule.firstOp4 <- 1;
																	thisModule.cfState4 <- thisModule.preState;
																	thisModule.cfStatePre4 <- thisModule.preState;
																	thisModule.cfStateCur4 <- thisModule.curState;
																	for (op4 in fra4.operands){
																		for (tra4 in e.transitions -> select(tra4 | tra4.source = thisModule.cfStatePre4 and tra4.target = thisModule.cfStateCur4)){	
																			if (thisModule.firstOp4 >= 1){
																				tra4.output <- op4.guard;
																				tra4.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																				tra4.action <- op4.guard;
																				thisModule.firstOp4 <- 0;
																			}
																			else{
																				-- Rule Transition
																				e.states <- thisModule.LrState();
																				thisModule.source <- thisModule.cfState4;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- op4.guard;
																				thisModule.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																				thisModule.action <- op4.guard;
																				e.transitions <- thisModule.LrTransition();
																					
																				for (t4 in e.transitions -> select(t4 | t4.name = thisModule.source.name+'->'+thisModule.target.name)){
																					thisModule.eventName <- tra4.event.name;
																					thisModule.eventReturn <- tra4.event.return;
																					thisModule.eventClass <- tra4.event.class;
																					t4.event <- thisModule.LrTransitionEvent(t4);
																							
																					for (arg4 in tra4.event.args) {
																						thisModule.argName <- arg4.argName;
																						thisModule.argType <- arg4.argType;
																						t4.event.args <- thisModule.LrTransitionEventArg(t4.event);
																					}
																					
																					thisModule.inputName <- tra4.input.name;
																					t4.input <- thisModule.LrTransitionInput(t4);
																							
																					for (var4 in tra4.input.variables) {
																						thisModule.inputVarName <- var4.name;
																						thisModule.inputVarType <- var4.type;
																						thisModule.inputVarClass <- var4.class;
																						t4.input.variables <-  thisModule.LrTransitionInputVar(t4.input);
																					}
																				}
																			}
																		}
																		for (msg4 in op4.fragOpds -> select(msg4 | msg4.oclIsTypeOf(SequenceDiagram!Message))){
																			if (msg4.type.toString() = 'op'){
																				-- Rule ContextVariable
																				if (msg4.operation.returnType <> 'void'){
																					e.contextVariables <- thisModule.LrContextVariable(msg4.operation);
																				}
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																					
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				if (msg4.operation.returnType <> 'void'){
																					thisModule.output <- msg4.operation.returnVariable+' ';
																				}
																				else{
																					thisModule.output <- '';
																				}
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);

																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.eventName <- msg4.name;
																					thisModule.eventReturn <- msg4.operation.returnType;
																					thisModule.eventClass <- msg4.target.name.toString();
																					tra4.event <- thisModule.LrTransitionEvent(tra4);

																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);	 				

																					for (a4 in msg4.operation.args){
																						thisModule.argName <- a4.argName;
																						thisModule.argType <- a4.argType;
																						tra4.event.args <-  thisModule.LrTransitionEventArg(tra4.event);
																							
																						thisModule.inputVarName <- a4.argName;
																						thisModule.inputVarType <- a4.argType;
																						thisModule.inputVarClass <- a4.lifeline.name;
																						tra4.input.variables <-  thisModule.LrTransitionInputVar(tra4.input);
																					}
																				}
																			}
																			if (msg4.type.toString() = 'si'){
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- '';
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);
																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																				}								
																			}
																		}
																		if (thisModule.firstOpe4 >= 1){
																			thisModule.cfStateLas4 <- thisModule.curState;
																			thisModule.firstOpe4 <- 0;
																		}
																	}
																}
															}
														}
														-- Fourth Level - End
													}
												}
												-- Rule alt or role opt
												if (fra3.interactionOperator.toString() = 'alt' or fra3.interactionOperator.toString() = 'opt'){
													thisModule.firstOp3 <- 1;
													thisModule.cfState3 <- thisModule.preState;
													thisModule.cfStatePre3 <- thisModule.preState;
													thisModule.cfStateCur3 <- thisModule.curState;
													for (op3 in fra3.operands){
														for (tra3 in e.transitions -> select(tra3 | tra3.source = thisModule.cfStatePre3 and tra3.target = thisModule.cfStateCur3)){	
															if (thisModule.firstOp3 >= 1){
																tra3.output <- op3.guard;
																tra3.guard <- op3.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																tra3.action <- op3.guard;
																thisModule.firstOp3 <- 0;
															}
															else{
																-- Rule Transition
																e.states <- thisModule.LrState();
																thisModule.source <- thisModule.cfState3;
																thisModule.target <- thisModule.curState;
																thisModule.output <- op3.guard;
																thisModule.guard <- op3.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																thisModule.action <- op3.guard;
																e.transitions <- thisModule.LrTransition();
																
																for (t3 in e.transitions -> select(t3 | t3.name = thisModule.source.name+'->'+thisModule.target.name)){
																	thisModule.eventName <- tra3.event.name;
																	thisModule.eventReturn <- tra3.event.return;
																	thisModule.eventClass <- tra3.event.class;
																	t3.event <- thisModule.LrTransitionEvent(t3);
																		
																	for (arg3 in tra3.event.args) {
																		thisModule.argName <- arg3.argName;
																		thisModule.argType <- arg3.argType;
																		t3.event.args <- thisModule.LrTransitionEventArg(t3.event);
																	}
																
																	thisModule.inputName <- tra3.input.name;
																	t3.input <- thisModule.LrTransitionInput(t3);
																		
																	for (var3 in tra3.input.variables) {
																		thisModule.inputVarName <- var3.name;
																		thisModule.inputVarType <- var3.type;
																		thisModule.inputVarClass <- var3.class;
																		t3.input.variables <-  thisModule.LrTransitionInputVar(t3.input);
																	}
																}
															}
														}
														-- Fourth Level
														for (fra4 in op3.fragOpds){
															if (fra4.oclIsTypeOf(SequenceDiagram!Message)){
																if (fra4.type.toString() = 'op'){
																	-- Rule ContextVariable
																	if (fra4.operation.returnType <> 'void'){
																		e.contexrVariables <- thisModule.LrContextVariable(fra4.operation);
																	}
																	-- Rule Transition
																	e.states <- thisModule.LrState(fra4);
																	
																	thisModule.source <- thisModule.preState;
																	thisModule.target <- thisModule.curState;
																	if (fra4.operation.returnType <> 'void'){
																		thisModule.output <- fra4.operation.returnVariable+' ';
																	}
																	else{
																		thisModule.output <- '';
																	}
																	thisModule.guard <- '';
																	thisModule.action <- '';
																	e.transitions <- thisModule.LrTransition(fra4);

																	for (tra3 in e.transitions -> select(tra3 | tra3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																		thisModule.eventName <- fra4.name;
																		thisModule.eventReturn <- fra4.operation.returnType;
																		thisModule.eventClass <- fra4.target.name.toString();
																		tra3.event <- thisModule.LrTransitionEvent(tra3);

																		thisModule.inputName <- fra4.name;
																		tra3.input <- thisModule.LrTransitionInput(tra3);	 				

																		for (a3 in fra4.operation.args){
																			thisModule.argName <- a3.argName;
																			thisModule.argType <- a3.argType;
																			tra3.event.args <-  thisModule.LrTransitionEventArg(tra3.event);
																			
																			thisModule.inputVarName <- a3.argName;
																			thisModule.inputVarType <- a3.argType;
																			thisModule.inputVarClass <- a3.lifeline.name;
																			tra3.input.variables <-  thisModule.LrTransitionInputVar(tra3.input);
																		}
																	}
																}
																if (fra4.type.toString() = 'si'){
																	-- Rule Transition
																	e.states <- thisModule.LrState(fra4);
																	thisModule.source <- thisModule.preState;
																	thisModule.target <- thisModule.curState;
																	thisModule.output <- '';
																	thisModule.guard <- '';
																	thisModule.action <- '';
																	e.transitions <- thisModule.LrTransition(fra4);
																	for (tra3 in e.transitions -> select(tra3 | tra3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																		thisModule.inputName <- fra4.name;
																		tra3.input <- thisModule.LrTransitionInput(tra3);
																	}								
																}
															}
															-- CombinedFragment
															if (fra4.oclIsTypeOf(SequenceDiagram!CombinedFragment)) {
																-- rule loop
																if (fra4.interactionOperator.toString() = 'loop'){
																	thisModule.cfState3 <- thisModule.curState;
																	for (op4 in fra4.operands){
																		for (msg4 in op4.fragOpds -> select(msg4 | msg4.oclIsTypeOf(SequenceDiagram!Message))){
																			if (msg4.type.toString() = 'op'){
																				-- Rule ContextVariable
																				if (msg4.operation.returnType <> 'void'){
																					e.contextVariables <- thisModule.LrContextVariable(msg4.operation);
																				}
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																					
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				if (msg4.operation.returnType <> 'void'){
																					thisModule.output <- msg4.operation.returnVariable+' ';
																				}
																				else{
																					thisModule.output <- '';
																				}
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);

																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.eventName <- msg4.name;
																					thisModule.eventReturn <- msg4.operation.returnType;
																					thisModule.eventClass <- msg4.target.name.toString();
																					tra4.event <- thisModule.LrTransitionEvent(tra4);

																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																			
																					for (a4 in msg4.operation.args){
																						thisModule.argName <- a4.argName;
																						thisModule.argType <- a4.argType;
																						tra4.event.args <-  thisModule.LrTransitionEventArg(tra4.event);
																							
																						thisModule.inputVarName <- a4.argName;
																						thisModule.inputVarType <- a4.argType;
																						thisModule.inputVarClass <- a4.lifeline.name;
																						tra4.input.variables <- thisModule.LrTransitionInputVar(tra4.input);
																					}
																				}
																			}
																			if (msg4.type.toString() = 'si'){
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- '';
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);
																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																				}								
																			}
																			if ((msg4.type.toString() = 're') and (op4.guard.startsWith(msg4.name) = true)){
																				for (tra4 in e.transitions -> select(tra4 | tra4.target = thisModule.curState)) {
																					tra4.output <- 'not ('+op4.guard+')';
																					tra4.guard <- '! ('+op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ')+')';
																					tra4.action <- 'not ('+op4.guard+')';
																					-- Rule Transition
																					thisModule.source <- thisModule.preState;
																					thisModule.target <- thisModule.cfState4;
																					thisModule.output <- op4.guard;
																					thisModule.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																					thisModule.action <- op4.guard;
																					e.transitions <- thisModule.LrTransition(msg4);
																						
																					for (t4 in e.transitions -> select(t4 | t4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																						thisModule.eventName <- tra4.event.name;
																						thisModule.eventReturn <- tra4.event.return;
																						thisModule.eventClass <- tra4.event.class;
																						t4.event <- thisModule.LrTransitionEvent(t4);
																					
																						for (arg4 in tra4.event.args) {
																							thisModule.argName <- arg4.argName;
																							thisModule.argType <- arg4.argType;
																							t4.event.args <-  thisModule.LrTransitionEventArg(t4.event);
																						}
																					   
																						thisModule.inputName <- tra4.input.name;
																						t4.input <- thisModule.LrTransitionInput(t4);
																							
																						for (var4 in tra4.input.variables) {
																							thisModule.inputVarName <- var4.name;
																							thisModule.inputVarType <- var4.type;
																							thisModule.inputVarClass <- var4.class;
																							t4.input.variables <-  thisModule.LrTransitionInputVar(t4.input);
																						}
																					}
																				}        						
																			}
																		}
																	}
																}
																-- Rule alt or role opt
																if (fra4.interactionOperator.toString() = 'alt' or fra4.interactionOperator.toString() = 'opt'){
																	thisModule.firstOp4 <- 1;
																	thisModule.cfState4 <- thisModule.preState;
																	thisModule.cfStatePre4 <- thisModule.preState;
																	thisModule.cfStateCur4 <- thisModule.curState;
																	for (op4 in fra4.operands){
																		for (tra4 in e.transitions -> select(tra4 | tra4.source = thisModule.cfStatePre4 and tra4.target = thisModule.cfStateCur4)){	
																			if (thisModule.firstOp4 >= 1){
																				tra4.output <- op4.guard;
																				tra4.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																				tra4.action <- op4.guard;
																				thisModule.firstOp4 <- 0;
																			}
																			else{
																				-- Rule Transition
																				e.states <- thisModule.LrState();
																				thisModule.source <- thisModule.cfState4;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- op4.guard;
																				thisModule.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																				thisModule.action <- op4.guard;
																				e.transitions <- thisModule.LrTransition();
																					
																				for (t4 in e.transitions -> select(t4 | t4.name = thisModule.source.name+'->'+thisModule.target.name)){
																					thisModule.eventName <- tra4.event.name;
																					thisModule.eventReturn <- tra4.event.return;
																					thisModule.eventClass <- tra4.event.class;
																					t4.event <- thisModule.LrTransitionEvent(t4);
																							
																					for (arg4 in tra4.event.args) {
																						thisModule.argName <- arg4.argName;
																						thisModule.argType <- arg4.argType;
																						t4.event.args <- thisModule.LrTransitionEventArg(t4.event);
																					}
																					
																					thisModule.inputName <- tra4.input.name;
																					t4.input <- thisModule.LrTransitionInput(t4);
																							
																					for (var4 in tra4.input.variables) {
																						thisModule.inputVarName <- var4.name;
																						thisModule.inputVarType <- var4.type;
																						thisModule.inputVarClass <- var4.class;
																						t4.input.variables <-  thisModule.LrTransitionInputVar(t4.input);
																					}
																				}
																			}
																		}
																		for (msg4 in op4.fragOpds -> select(msg4 | msg4.oclIsTypeOf(SequenceDiagram!Message))){
																			if (msg4.type.toString() = 'op'){
																				-- Rule ContextVariable
																				if (msg4.operation.returnType <> 'void'){
																					e.contextVariables <- thisModule.LrContextVariable(msg4.operation);
																				}
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																					
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				if (msg4.operation.returnType <> 'void'){
																					thisModule.output <- msg4.operation.returnVariable+' ';
																				}
																				else{
																					thisModule.output <- '';
																				}
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);

																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.eventName <- msg4.name;
																					thisModule.eventReturn <- msg4.operation.returnType;
																					thisModule.eventClass <- msg4.target.name.toString();
																					tra4.event <- thisModule.LrTransitionEvent(tra4);

																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);	 				

																					for (a4 in msg4.operation.args){
																						thisModule.argName <- a4.argName;
																						thisModule.argType <- a4.argType;
																						tra4.event.args <-  thisModule.LrTransitionEventArg(tra4.event);
																							
																						thisModule.inputVarName <- a4.argName;
																						thisModule.inputVarType <- a4.argType;
																						thisModule.inputVarClass <- a4.lifeline.name;
																						tra4.input.variables <-  thisModule.LrTransitionInputVar(tra4.input);
																					}
																				}
																			}
																			if (msg4.type.toString() = 'si'){
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- '';
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);
																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																				}								
																			}
																		}
																		if (thisModule.firstOpe4 >= 1){
																			thisModule.cfStateLas4 <- thisModule.curState;
																			thisModule.firstOpe4 <- 0;
																		}
																	}
																}
															}
														}
														-- Fourth Level - End
														if (thisModule.firstOpe3 >= 1){
															thisModule.cfStateLas3 <- thisModule.curState;
															thisModule.firstOpe3 <- 0;
														}
													}
												}
											}
										}	
										-- Third Level - End						
										if (thisModule.firstOpe2 >= 1){
											thisModule.cfStateLas2 <- thisModule.curState;
											thisModule.firstOpe2 <- 0;
										}	
									}
								}
							}
						}
						-- Second Level - End
			 		}
				}
				-- Rule alt or role opt
				if (fra.interactionOperator.toString() = 'alt' or fra.interactionOperator.toString() = 'opt'){
			 		thisModule.firstOp <- 1;
					thisModule.cfState <- thisModule.preState;
			 		thisModule.cfStatePre <- thisModule.preState;
			 		thisModule.cfStateCur <- thisModule.curState;
			 		for (op in fra.operands){
        				for (tra in e.transitions -> select(tra | tra.source = thisModule.cfStatePre and tra.target = thisModule.cfStateCur)){	
        					if (thisModule.firstOp >= 1){
								tra.output <- op.guard;
								tra.guard <- op.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
								tra.action <- op.guard;
								thisModule.firstOp <- 0;
							}
							else{
			    				-- Rule Transition
								e.states <- thisModule.LrState();
        						thisModule.source <- thisModule.cfState;
        						thisModule.target <- thisModule.curState;
        						thisModule.output <- op.guard;
        						thisModule.guard <- op.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
        						thisModule.action <- op.guard;
		 						e.transitions <- thisModule.LrTransition();
		 						
		 						for (t in e.transitions -> select(t | t.name = thisModule.source.name+'->'+thisModule.target.name)){
		 							thisModule.eventName <- tra.event.name;
		 							thisModule.eventReturn <- tra.event.return;
		 							thisModule.eventClass <- tra.event.class;
		 							t.event <- thisModule.LrTransitionEvent(t);
		 						    	
		 							for (arg in tra.event.args) {
		 								thisModule.argName <- arg.argName;
		 						    	thisModule.argType <- arg.argType;
        								t.event.args <- thisModule.LrTransitionEventArg(t.event);
		 							}
        						
		 							thisModule.inputName <- tra.input.name;
		 							t.input <- thisModule.LrTransitionInput(t);
		 						    	
		 							for (var in tra.input.variables) {
		 								thisModule.inputVarName <- var.name;
		 						    	thisModule.inputVarType <- var.type;
		 						    	thisModule.inputVarClass <- var.class;
        								t.input.variables <-  thisModule.LrTransitionInputVar(t.input);
		 							}
		 						}
							}
        				}
			 			-- Second Level
						for (fra2 in op.fragOpds){
							if (fra2.oclIsTypeOf(SequenceDiagram!Message)){
								if (fra2.type.toString() = 'op'){
									-- Rule ContextVariable
									if (fra2.operation.returnType <> 'void'){
										e.contextVariables <- thisModule.LrContextVariable(fra2.operation);
									}
									-- Rule Transition
									e.states <- thisModule.LrState(fra2);
									
									thisModule.source <- thisModule.preState;
									thisModule.target <- thisModule.curState;
									if (fra2.operation.returnType <> 'void'){
										thisModule.output <- fra2.operation.returnVariable+' ';
									}
									else{
										thisModule.output <- '';
									}
									thisModule.guard <- '';
									thisModule.action <- '';
									e.transitions <- thisModule.LrTransition(fra2);

									for (tra in e.transitions -> select(tra | tra.name = thisModule.source.name+'->'+thisModule.target.name)) {
										thisModule.eventName <- fra2.name;
										thisModule.eventReturn <- fra2.operation.returnType;
										thisModule.eventClass <- fra2.target.name.toString();
										tra.event <- thisModule.LrTransitionEvent(tra);

										thisModule.inputName <- fra2.name;
										tra.input <- thisModule.LrTransitionInput(tra);	 				

										for (a in fra2.operation.args){
											thisModule.argName <- a.argName;
											thisModule.argType <- a.argType;
											tra.event.args <-  thisModule.LrTransitionEventArg(tra.event);
											
											thisModule.inputVarName <- a.argName;
											thisModule.inputVarType <- a.argType;
											thisModule.inputVarClass <- a.lifeline.name;
											tra.input.variables <-  thisModule.LrTransitionInputVar(tra.input);
										}
									}
								}
								if (fra2.type.toString() = 'si'){
									-- Rule Transition
									e.states <- thisModule.LrState(fra2);
									thisModule.source <- thisModule.preState;
									thisModule.target <- thisModule.curState;
									thisModule.output <- '';
									thisModule.guard <- '';
									thisModule.action <- '';
									e.transitions <- thisModule.LrTransition(fra2);
									for (tra in e.transitions -> select(tra | tra.name = thisModule.source.name+'->'+thisModule.target.name)) {
										thisModule.inputName <- fra2.name;
										tra.input <- thisModule.LrTransitionInput(tra);
									}								
								}
							}
							-- CombinedFragment
							if (fra2.oclIsTypeOf(SequenceDiagram!CombinedFragment)) {
								-- rule loop
								if (fra2.interactionOperator.toString() = 'loop'){
									thisModule.cfState2 <- thisModule.curState;
									for (op2 in fra2.operands){
										-- Third Level
										for (fra3 in op2.fragOpds){
											if (fra3.oclIsTypeOf(SequenceDiagram!Message)){
												if (fra3.type.toString() = 'op'){
													-- Rule ContextVariable
													if (fra3.operation.returnType <> 'void'){
														e.contextVariables <- thisModule.LrContextVariable(fra3.operation);
													}
													-- Rule Transition
													e.states <- thisModule.LrState(fra3);
													
													thisModule.source <- thisModule.preState;
													thisModule.target <- thisModule.curState;
													if (fra3.operation.returnType <> 'void'){
														thisModule.output <- fra3.operation.returnVariable+' ';
													}
													else{
														thisModule.output <- '';
													}
													thisModule.guard <- '';
													thisModule.action <- '';
													e.transitions <- thisModule.LrTransition(fra3);

													for (tra2 in e.transitions -> select(tra2 | tra2.name = thisModule.source.name+'->'+thisModule.target.name)) {
														thisModule.eventName <- fra3.name;
														thisModule.eventReturn <- fra3.operation.returnType;
														thisModule.eventClass <- fra3.target.name.toString();
														tra2.event <- thisModule.LrTransitionEvent(tra2);

														thisModule.inputName <- fra3.name;
														tra2.input <- thisModule.LrTransitionInput(tra2);
											
														for (a2 in fra3.operation.args){
															thisModule.argName <- a2.argName;
															thisModule.argType <- a2.argType;
															tra2.event.args <-  thisModule.LrTransitionEventArg(tra2.event);
															
															thisModule.inputVarName <- a2.argName;
															thisModule.inputVarType <- a2.argType;
															thisModule.inputVarClass <- a2.lifeline.name;
															tra2.input.variables <- thisModule.LrTransitionInputVar(tra2.input);
														}
													}
												}
												if (fra3.type.toString() = 'si'){
													-- Rule Transition
													e.states <- thisModule.LrState(fra3);
													thisModule.source <- thisModule.preState;
													thisModule.target <- thisModule.curState;
													thisModule.output <- '';
													thisModule.guard <- '';
													thisModule.action <- '';
													e.transitions <- thisModule.LrTransition(fra3);
													for (tra2 in e.transitions -> select(tra2 | tra2.name = thisModule.source.name+'->'+thisModule.target.name)) {
														thisModule.inputName <- fra3.name;
														tra2.input <- thisModule.LrTransitionInput(tra2);
													}								
												}
												if ((fra3.type.toString() = 're') and (op2.guard.startsWith(fra3.name) = true)){
													for (tra2 in e.transitions -> select(tra2 | tra2.target = thisModule.curState)) {
														tra2.output <- 'not ('+op2.guard+')';
														tra2.guard <- '! ('+op2.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ')+')';
														tra2.action <- 'not ('+op2.guard+')';														
														-- Rule Transition
														thisModule.source <- thisModule.preState;
														thisModule.target <- thisModule.cfState2;
														thisModule.output <- op2.guard;
														thisModule.guard <- op2.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
														thisModule.action <- op2.guard;
														e.transitions <- thisModule.LrTransition(fra3);
														
														for (t2 in e.transitions -> select(t2 | t2.name = thisModule.source.name+'->'+thisModule.target.name)) {
															thisModule.eventName <- tra2.event.name;
															thisModule.eventReturn <- tra2.event.return;
															thisModule.eventClass <- tra2.event.class;
															t2.event <- thisModule.LrTransitionEvent(t2);
														
															for (arg2 in tra2.event.args) {
																thisModule.argName <- arg2.argName;
																thisModule.argType <- arg2.argType;
																t2.event.args <-  thisModule.LrTransitionEventArg(t2.event);
															}
													   
															thisModule.inputName <- tra2.input.name;
															t2.input <- thisModule.LrTransitionInput(t2);
															
															for (var2 in tra2.input.variables) {
																thisModule.inputVarName <- var2.name;
																thisModule.inputVarType <- var2.type;
																thisModule.inputVarClass <- var2.class;
																t2.input.variables <-  thisModule.LrTransitionInputVar(t2.input);
															}
														}
													}        						
												}
											}
											-- CombinedFragment
											if (fra3.oclIsTypeOf(SequenceDiagram!CombinedFragment)) {
												-- rule loop
												if (fra3.interactionOperator.toString() = 'loop'){
													thisModule.cfState3 <- thisModule.curState;
													for (op3 in fra3.operands){
														-- Fourth Level
														for (fra4 in op3.fragOpds){
															if (fra4.oclIsTypeOf(SequenceDiagram!Message)){
																if (fra4.type.toString() = 'op'){
																	-- Rule ContextVariable
																	if (fra4.operation.returnType <> 'void'){
																		e.contextVariables <- thisModule.LrContextVariable(fra4.operation);
																	}
																	-- Rule Transition
																	e.states <- thisModule.LrState(fra4);
																	
																	thisModule.source <- thisModule.preState;
																	thisModule.target <- thisModule.curState;
																	if (fra4.operation.returnType <> 'void'){
																		thisModule.output <- fra4.operation.returnVariable+' ';
																	}
																	else{
																		thisModule.output <- '';
																	}
																	thisModule.guard <- '';
																	thisModule.action <- '';
																	e.transitions <- thisModule.LrTransition(fra4);

																	for (tra3 in e.transitions -> select(tra3 | tra3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																		thisModule.eventName <- fra4.name;
																		thisModule.eventReturn <- fra4.operation.returnType;
																		thisModule.eventClass <- fra4.target.name.toString();
																		tra3.event <- thisModule.LrTransitionEvent(tra3);

																		thisModule.inputName <- fra4.name;
																		tra3.input <- thisModule.LrTransitionInput(tra3);
															
																		for (a3 in fra4.operation.args){
																			thisModule.argName <- a3.argName;
																			thisModule.argType <- a3.argType;
																			tra3.event.args <-  thisModule.LrTransitionEventArg(tra3.event);
																			
																			thisModule.inputVarName <- a3.argName;
																			thisModule.inputVarType <- a3.argType;
																			thisModule.inputVarClass <- a3.lifeline.name;
																			tra3.input.variables <- thisModule.LrTransitionInputVar(tra3.input);
																		}
																	}
																}
																if (fra4.type.toString() = 'si'){
																	-- Rule Transition
																	e.states <- thisModule.LrState(fra4);
																	thisModule.source <- thisModule.preState;
																	thisModule.target <- thisModule.curState;
																	thisModule.output <- '';
																	thisModule.guard <- '';
																	thisModule.action <- '';
																	e.transitions <- thisModule.LrTransition(fra4);
																	for (tra3 in e.transitions -> select(tra3 | tra3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																		thisModule.inputName <- fra4.name;
																		tra3.input <- thisModule.LrTransitionInput(tra3);
																	}								
																}
																if ((fra4.type.toString() = 're') and (op3.guard.startsWith(fra4.name) = true)){
																	for (tra3 in e.transitions -> select(tra3 | tra3.target = thisModule.curState)) {
																		tra3.output <- 'not ('+op3.guard+')';
																		tra3.guard <- '! ('+op3.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ')+')';
																		tra3.action <- 'not ('+op3.guard+')';
																		-- Rule Transition
																		thisModule.source <- thisModule.preState;
																		thisModule.target <- thisModule.cfState3;
																		thisModule.output <- op3.guard;
																		thisModule.guard <- op3.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																		thisModule.action <- op3.guard;
																		e.transitions <- thisModule.LrTransition(fra4);
																		
																		for (t3 in e.transitions -> select(t3 | t3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																			thisModule.eventName <- tra3.event.name;
																			thisModule.eventReturn <- tra3.event.return;
																			thisModule.eventClass <- tra3.event.class;
																			t3.event <- thisModule.LrTransitionEvent(t3);
																		
																			for (arg3 in tra3.event.args) {
																				thisModule.argName <- arg3.argName;
																				thisModule.argType <- arg3.argType;
																				t3.event.args <-  thisModule.LrTransitionEventArg(t3.event);
																			}
																	   
																			thisModule.inputName <- tra3.input.name;
																			t3.input <- thisModule.LrTransitionInput(t3);
																			
																			for (var3 in tra3.input.variables) {
																				thisModule.inputVarName <- var3.name;
																				thisModule.inputVarType <- var3.type;
																				thisModule.inputVarClass <- var3.class;
																				t3.input.variables <-  thisModule.LrTransitionInputVar(t3.input);
																			}
																		}
																	}
																}
															}
															-- CombinedFragment
															if (fra4.oclIsTypeOf(SequenceDiagram!CombinedFragment)) {
																-- rule loop
																if (fra4.interactionOperator.toString() = 'loop'){
																	thisModule.cfState3 <- thisModule.curState;
																	for (op4 in fra4.operands){
																		for (msg4 in op4.fragOpds -> select(msg4 | msg4.oclIsTypeOf(SequenceDiagram!Message))){
																			if (msg4.type.toString() = 'op'){
																				-- Rule ContextVariable
																				if (msg4.operation.returnType <> 'void'){
																					e.contextVariables <- thisModule.LrContextVariable(msg4.operation);
																				}
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																					
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				if (msg4.operation.returnType <> 'void'){
																					thisModule.output <- msg4.operation.returnVariable+' ';
																				}
																				else{
																					thisModule.output <- '';
																				}
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);

																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.eventName <- msg4.name;
																					thisModule.eventReturn <- msg4.operation.returnType;
																					thisModule.eventClass <- msg4.target.name.toString();
																					tra4.event <- thisModule.LrTransitionEvent(tra4);

																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																			
																					for (a4 in msg4.operation.args){
																						thisModule.argName <- a4.argName;
																						thisModule.argType <- a4.argType;
																						tra4.event.args <-  thisModule.LrTransitionEventArg(tra4.event);
																							
																						thisModule.inputVarName <- a4.argName;
																						thisModule.inputVarType <- a4.argType;
																						thisModule.inputVarClass <- a4.lifeline.name;
																						tra4.input.variables <- thisModule.LrTransitionInputVar(tra4.input);
																					}
																				}
																			}
																			if (msg4.type.toString() = 'si'){
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- '';
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);
																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																				}								
																			}
																			if ((msg4.type.toString() = 're') and (op4.guard.startsWith(msg4.name) = true)){
																				for (tra4 in e.transitions -> select(tra4 | tra4.target = thisModule.curState)) {
																					tra4.output <- 'not ('+op4.guard+')';
																					tra4.guard <- '! ('+op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ')+')';
																					tra4.action <- 'not ('+op4.guard+')';
																					-- Rule Transition
																					thisModule.source <- thisModule.preState;
																					thisModule.target <- thisModule.cfState4;
																					thisModule.output <- op4.guard;
																					thisModule.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																					thisModule.action <- op4.guard;
																					e.transitions <- thisModule.LrTransition(msg4);
																						
																					for (t4 in e.transitions -> select(t4 | t4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																						thisModule.eventName <- tra4.event.name;
																						thisModule.eventReturn <- tra4.event.return;
																						thisModule.eventClass <- tra4.event.class;
																						t4.event <- thisModule.LrTransitionEvent(t4);
																					
																						for (arg4 in tra4.event.args) {
																							thisModule.argName <- arg4.argName;
																							thisModule.argType <- arg4.argType;
																							t4.event.args <-  thisModule.LrTransitionEventArg(t4.event);
																						}
																					   
																						thisModule.inputName <- tra4.input.name;
																						t4.input <- thisModule.LrTransitionInput(t4);
																							
																						for (var4 in tra4.input.variables) {
																							thisModule.inputVarName <- var4.name;
																							thisModule.inputVarType <- var4.type;
																							thisModule.inputVarClass <- var4.class;
																							t4.input.variables <-  thisModule.LrTransitionInputVar(t4.input);
																						}
																					}
																				}        						
																			}
																		}
																	}
																}
																-- Rule alt or role opt
																if (fra4.interactionOperator.toString() = 'alt' or fra4.interactionOperator.toString() = 'opt'){
																	thisModule.firstOp4 <- 1;
																	thisModule.cfState4 <- thisModule.preState;
																	thisModule.cfStatePre4 <- thisModule.preState;
																	thisModule.cfStateCur4 <- thisModule.curState;
																	for (op4 in fra4.operands){
																		for (tra4 in e.transitions -> select(tra4 | tra4.source = thisModule.cfStatePre4 and tra4.target = thisModule.cfStateCur4)){	
																			if (thisModule.firstOp4 >= 1){
																				tra4.output <- op4.guard;
																				tra4.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																				tra4.action <- op4.guard;
																				thisModule.firstOp4 <- 0;
																			}
																			else{
																				-- Rule Transition
																				e.states <- thisModule.LrState();
																				thisModule.source <- thisModule.cfState4;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- op4.guard;
																				thisModule.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																				thisModule.action <- op4.guard;
																				e.transitions <- thisModule.LrTransition();
																					
																				for (t4 in e.transitions -> select(t4 | t4.name = thisModule.source.name+'->'+thisModule.target.name)){
																					thisModule.eventName <- tra4.event.name;
																					thisModule.eventReturn <- tra4.event.return;
																					thisModule.eventClass <- tra4.event.class;
																					t4.event <- thisModule.LrTransitionEvent(t4);
																							
																					for (arg4 in tra4.event.args) {
																						thisModule.argName <- arg4.argName;
																						thisModule.argType <- arg4.argType;
																						t4.event.args <- thisModule.LrTransitionEventArg(t4.event);
																					}
																					
																					thisModule.inputName <- tra4.input.name;
																					t4.input <- thisModule.LrTransitionInput(t4);
																							
																					for (var4 in tra4.input.variables) {
																						thisModule.inputVarName <- var4.name;
																						thisModule.inputVarType <- var4.type;
																						thisModule.inputVarClass <- var4.class;
																						t4.input.variables <-  thisModule.LrTransitionInputVar(t4.input);
																					}
																				}
																			}
																		}
																		for (msg4 in op4.fragOpds -> select(msg4 | msg4.oclIsTypeOf(SequenceDiagram!Message))){
																			if (msg4.type.toString() = 'op'){
																				-- Rule ContextVariable
																				if (msg4.operation.returnType <> 'void'){
																					e.contextVariables <- thisModule.LrContextVariable(msg4.operation);
																				}
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																					
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				if (msg4.operation.returnType <> 'void'){
																					thisModule.output <- msg4.operation.returnVariable+' ';
																				}
																				else{
																					thisModule.output <- '';
																				}
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);

																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.eventName <- msg4.name;
																					thisModule.eventReturn <- msg4.operation.returnType;
																					thisModule.eventClass <- msg4.target.name.toString();
																					tra4.event <- thisModule.LrTransitionEvent(tra4);

																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);	 				

																					for (a4 in msg4.operation.args){
																						thisModule.argName <- a4.argName;
																						thisModule.argType <- a4.argType;
																						tra4.event.args <-  thisModule.LrTransitionEventArg(tra4.event);
																							
																						thisModule.inputVarName <- a4.argName;
																						thisModule.inputVarType <- a4.argType;
																						thisModule.inputVarClass <- a4.lifeline.name;
																						tra4.input.variables <-  thisModule.LrTransitionInputVar(tra4.input);
																					}
																				}
																			}
																			if (msg4.type.toString() = 'si'){
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- '';
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);
																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																				}								
																			}
																		}
																		if (thisModule.firstOpe4 >= 1){
																			thisModule.cfStateLas4 <- thisModule.curState;
																			thisModule.firstOpe4 <- 0;
																		}
																	}
																}
															}
														}
														-- Fourth Level
													}
												}
												-- Rule alt or role opt
												if (fra3.interactionOperator.toString() = 'alt' or fra3.interactionOperator.toString() = 'opt'){
													thisModule.firstOp3 <- 1;
													thisModule.cfState3 <- thisModule.preState;
													thisModule.cfStatePre3 <- thisModule.preState;
													thisModule.cfStateCur3 <- thisModule.curState;
													for (op3 in fra3.operands){
														for (tra3 in e.transitions -> select(tra3 | tra3.source = thisModule.cfStatePre3 and tra3.target = thisModule.cfStateCur3)){	
															if (thisModule.firstOp3 >= 1){
																tra3.output <- op3.guard;
																tra3.guard <- op3.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																tra3.action <- op3.guard;
																thisModule.firstOp3 <- 0;
															}
															else{
																-- Rule Transition
																e.states <- thisModule.LrState();
																thisModule.source <- thisModule.cfState3;
																thisModule.target <- thisModule.curState;
																thisModule.output <- op3.guard;
																thisModule.guard <- op3.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																thisModule.action <- op3.guard;
																e.transitions <- thisModule.LrTransition();
																
																for (t3 in e.transitions -> select(t3 | t3.name = thisModule.source.name+'->'+thisModule.target.name)){
																	thisModule.eventName <- tra3.event.name;
																	thisModule.eventReturn <- tra3.event.return;
																	thisModule.eventClass <- tra3.event.class;
																	t3.event <- thisModule.LrTransitionEvent(t3);
																		
																	for (arg3 in tra3.event.args) {
																		thisModule.argName <- arg3.argName;
																		thisModule.argType <- arg3.argType;
																		t3.event.args <- thisModule.LrTransitionEventArg(t3.event);
																	}
																
																	thisModule.inputName <- tra3.input.name;
																	t3.input <- thisModule.LrTransitionInput(t3);
																		
																	for (var3 in tra3.input.variables) {
																		thisModule.inputVarName <- var3.name;
																		thisModule.inputVarType <- var3.type;
																		thisModule.inputVarClass <- var3.class;
																		t3.input.variables <-  thisModule.LrTransitionInputVar(t3.input);
																	}
																}
															}
														}
														for (msg3 in op3.fragOpds -> select(msg3 | msg3.oclIsTypeOf(SequenceDiagram!Message))){
															if (msg3.type.toString() = 'op'){
																-- Rule ContextVariable
																if (msg3.operation.returnType <> 'void'){
																	e.contextVariables <- thisModule.LrContextVariable(msg3.operation);
																}
																-- Rule Transition
																e.states <- thisModule.LrState(msg3);
																
																thisModule.source <- thisModule.preState;
																thisModule.target <- thisModule.curState;
																if (msg3.operation.returnType <> 'void'){
																	thisModule.output <- msg3.operation.returnVariable+' ';
																}
																else{
																	thisModule.output <- '';
																}
																thisModule.guard <- '';
																thisModule.action <- '';
																e.transitions <- thisModule.LrTransition(msg3);

																for (tra3 in e.transitions -> select(tra3 | tra3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																	thisModule.eventName <- msg3.name;
																	thisModule.eventReturn <- msg3.operation.returnType;
																	thisModule.eventClass <- msg3.target.name.toString();
																	tra3.event <- thisModule.LrTransitionEvent(tra3);

																	thisModule.inputName <- msg3.name;
																	tra3.input <- thisModule.LrTransitionInput(tra3);	 				

																	for (a3 in msg3.operation.args){
																		thisModule.argName <- a3.argName;
																		thisModule.argType <- a3.argType;
																		tra3.event.args <-  thisModule.LrTransitionEventArg(tra3.event);
																		
																		thisModule.inputVarName <- a3.argName;
																		thisModule.inputVarType <- a3.argType;
																		thisModule.inputVarClass <- a3.lifeline.name;
																		tra3.input.variables <-  thisModule.LrTransitionInputVar(tra3.input);
																	}
																}
															}
															if (msg3.type.toString() = 'si'){
																-- Rule Transition
																e.states <- thisModule.LrState(msg3);
																thisModule.source <- thisModule.preState;
																thisModule.target <- thisModule.curState;
																thisModule.output <- '';
																thisModule.guard <- '';
																thisModule.action <- '';
																e.transitions <- thisModule.LrTransition(msg3);
																for (tra3 in e.transitions -> select(tra3 | tra3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																	thisModule.inputName <- msg3.name;
																	tra3.input <- thisModule.LrTransitionInput(tra3);
																}								
															}
														}
														if (thisModule.firstOpe3 >= 1){
															thisModule.cfStateLas3 <- thisModule.curState;
															thisModule.firstOpe3 <- 0;
														}
													}
												}
											}
										}
										-- Third Level - End
									}
								}
								-- Rule alt or role opt
								if (fra2.interactionOperator.toString() = 'alt' or fra2.interactionOperator.toString() = 'opt'){
									thisModule.firstOp2 <- 1;
									thisModule.cfState2 <- thisModule.preState;
									thisModule.cfStatePre2 <- thisModule.preState;
									thisModule.cfStateCur2 <- thisModule.curState;
									for (op2 in fra2.operands){
										for (tra2 in e.transitions -> select(tra2 | tra2.source = thisModule.cfStatePre2 and tra2.target = thisModule.cfStateCur2)){	
											if (thisModule.firstOp2 >= 1){
												tra2.output <- op2.guard;
												tra2.guard <- op2.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
												tra2.action <- op2.guard;
												thisModule.firstOp2 <- 0;
											}
											else{
												-- Rule Transition
												e.states <- thisModule.LrState();
												thisModule.source <- thisModule.cfState2;
												thisModule.target <- thisModule.curState;
												thisModule.output <- op2.guard;
												thisModule.guard <- op2.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
												thisModule.action <- op2.guard;
												e.transitions <- thisModule.LrTransition();
												
												for (t2 in e.transitions -> select(t2 | t2.name = thisModule.source.name+'->'+thisModule.target.name)){
													thisModule.eventName <- tra2.event.name;
													thisModule.eventReturn <- tra2.event.return;
													thisModule.eventClass <- tra2.event.class;
													t2.event <- thisModule.LrTransitionEvent(t2);
														
													for (arg2 in tra2.event.args) {
														thisModule.argName <- arg2.argName;
														thisModule.argType <- arg2.argType;
														t2.event.args <- thisModule.LrTransitionEventArg(t2.event);
													}
												
													thisModule.inputName <- tra2.input.name;
													t2.input <- thisModule.LrTransitionInput(t2);
														
													for (var2 in tra2.input.variables) {
														thisModule.inputVarName <- var2.name;
														thisModule.inputVarType <- var2.type;
														thisModule.inputVarClass <- var2.class;
														t2.input.variables <-  thisModule.LrTransitionInputVar(t2.input);
													}
												}
											}
										}
										-- Third Level
										for (fra3 in op2.fragOpds){
											if (fra3.oclIsTypeOf(SequenceDiagram!Message)){
												if (fra3.type.toString() = 'op'){
													-- Rule ContextVariable
													if (fra3.operation.returnType <> 'void'){
														e.contextVariables <- thisModule.LrContextVariable(fra3.operation);
													}
													-- Rule Transition
													e.states <- thisModule.LrState(fra3);
													
													thisModule.source <- thisModule.preState;
													thisModule.target <- thisModule.curState;
													if (fra3.operation.returnType <> 'void'){
														thisModule.output <- fra3.operation.returnVariable+' ';
													}
													else{
														thisModule.output <- '';
													}
													thisModule.guard <- '';
													thisModule.action <- '';
													e.transitions <- thisModule.LrTransition(fra3);

													for (tra2 in e.transitions -> select(tra2 | tra2.name = thisModule.source.name+'->'+thisModule.target.name)) {
														thisModule.eventName <- fra3.name;
														thisModule.eventReturn <- fra3.operation.returnType;
														thisModule.eventClass <- fra3.target.name.toString();
														tra2.event <- thisModule.LrTransitionEvent(tra2);

														thisModule.inputName <- fra3.name;
														tra2.input <- thisModule.LrTransitionInput(tra2);	 				

														for (a2 in fra3.operation.args){
															thisModule.argName <- a2.argName;
															thisModule.argType <- a2.argType;
															tra2.event.args <-  thisModule.LrTransitionEventArg(tra2.event);
															
															thisModule.inputVarName <- a2.argName;
															thisModule.inputVarType <- a2.argType;
															thisModule.inputVarClass <- a2.lifeline.name;
															tra2.input.variables <-  thisModule.LrTransitionInputVar(tra2.input);
														}
													}
												}
												if (fra3.type.toString() = 'si'){
													-- Rule Transition
													e.states <- thisModule.LrState(fra3);
													thisModule.source <- thisModule.preState;
													thisModule.target <- thisModule.curState;
													thisModule.output <- '';
													thisModule.guard <- '';
													thisModule.action <- '';
													e.transitions <- thisModule.LrTransition(fra3);
													for (tra2 in e.transitions -> select(tra2 | tra2.name = thisModule.source.name+'->'+thisModule.target.name)) {
														thisModule.inputName <- fra3.name;
														tra2.input <- thisModule.LrTransitionInput(tra2);
													}								
												}
											}
											-- CombinedFragment
											if (fra3.oclIsTypeOf(SequenceDiagram!CombinedFragment)) {
												-- rule loop
												if (fra3.interactionOperator.toString() = 'loop'){
													thisModule.cfState3 <- thisModule.curState;
													for (op3 in fra3.operands){
														-- Fourth Level
														for (fra4 in op3.fragOpds){
															if (fra4.oclIsTypeOf(SequenceDiagram!Message)){
																if (fra4.type.toString() = 'op'){
																	-- Rule ContextVariable
																	if (fra4.operation.returnType <> 'void'){
																		e.contextVariables <- thisModule.LrContextVariable(fra4.operation);
																	}
																	-- Rule Transition
																	e.states <- thisModule.LrState(fra4);
																	
																	thisModule.source <- thisModule.preState;
																	thisModule.target <- thisModule.curState;
																	if (fra4.operation.returnType <> 'void'){
																		thisModule.output <- fra4.operation.returnVariable+' ';
																	}
																	else{
																		thisModule.output <- '';
																	}
																	thisModule.guard <- '';
																	thisModule.action <- '';
																	e.transitions <- thisModule.LrTransition(fra4);

																	for (tra3 in e.transitions -> select(tra3 | tra3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																		thisModule.eventName <- fra4.name;
																		thisModule.eventReturn <- fra4.operation.returnType;
																		thisModule.eventClass <- fra4.target.name.toString();
																		tra3.event <- thisModule.LrTransitionEvent(tra3);

																		thisModule.inputName <- fra4.name;
																		tra3.input <- thisModule.LrTransitionInput(tra3);
															
																		for (a3 in fra4.operation.args){
																			thisModule.argName <- a3.argName;
																			thisModule.argType <- a3.argType;
																			tra3.event.args <-  thisModule.LrTransitionEventArg(tra3.event);
																			
																			thisModule.inputVarName <- a3.argName;
																			thisModule.inputVarType <- a3.argType;
																			thisModule.inputVarClass <- a3.lifeline.name;
																			tra3.input.variables <- thisModule.LrTransitionInputVar(tra3.input);
																		}
																	}
																}
																if (fra4.type.toString() = 'si'){
																	-- Rule Transition
																	e.states <- thisModule.LrState(fra4);
																	thisModule.source <- thisModule.preState;
																	thisModule.target <- thisModule.curState;
																	thisModule.output <- '';
																	thisModule.guard <- '';
																	thisModule.action <- '';
																	e.transitions <- thisModule.LrTransition(fra4);
																	for (tra3 in e.transitions -> select(tra3 | tra3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																		thisModule.inputName <- fra4.name;
																		tra3.input <- thisModule.LrTransitionInput(tra3);
																	}								
																}
																if ((fra4.type.toString() = 're') and (op3.guard.startsWith(fra4.name) = true)){
																	for (tra3 in e.transitions -> select(tra3 | tra3.target = thisModule.curState)) {
																		tra3.output <- 'not ('+op3.guard+')';
																		tra3.guard <- '! ('+op3.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ')+')';
																		tra3.action <- 'not ('+op3.guard+')';
																		-- Rule Transition
																		thisModule.source <- thisModule.preState;
																		thisModule.target <- thisModule.cfState3;
																		thisModule.output <- op3.guard;
																		thisModule.guard <- op3.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																		thisModule.action <- op3.guard;
																		e.transitions <- thisModule.LrTransition(fra4);
																		
																		for (t3 in e.transitions -> select(t3 | t3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																			thisModule.eventName <- tra3.event.name;
																			thisModule.eventReturn <- tra3.event.return;
																			thisModule.eventClass <- tra3.event.class;
																			t3.event <- thisModule.LrTransitionEvent(t3);
																		
																			for (arg3 in tra3.event.args) {
																				thisModule.argName <- arg3.argName;
																				thisModule.argType <- arg3.argType;
																				t3.event.args <-  thisModule.LrTransitionEventArg(t3.event);
																			}
																	   
																			thisModule.inputName <- tra3.input.name;
																			t3.input <- thisModule.LrTransitionInput(t3);
																			
																			for (var3 in tra3.input.variables) {
																				thisModule.inputVarName <- var3.name;
																				thisModule.inputVarType <- var3.type;
																				thisModule.inputVarClass <- var3.class;
																				t3.input.variables <-  thisModule.LrTransitionInputVar(t3.input);
																			}
																		}
																	}        						
																}
															}
															-- CombinedFragment
															if (fra4.oclIsTypeOf(SequenceDiagram!CombinedFragment)) {
																-- rule loop
																if (fra4.interactionOperator.toString() = 'loop'){
																	thisModule.cfState3 <- thisModule.curState;
																	for (op4 in fra4.operands){
																		for (msg4 in op4.fragOpds -> select(msg4 | msg4.oclIsTypeOf(SequenceDiagram!Message))){
																			if (msg4.type.toString() = 'op'){
																				-- Rule ContextVariable
																				if (msg4.operation.returnType <> 'void'){
																					e.contextVariables <- thisModule.LrContextVariable(msg4.operation);
																				}
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																					
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				if (msg4.operation.returnType <> 'void'){
																					thisModule.output <- msg4.operation.returnVariable+' ';
																				}
																				else{
																					thisModule.output <- '';
																				}
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);

																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.eventName <- msg4.name;
																					thisModule.eventReturn <- msg4.operation.returnType;
																					thisModule.eventClass <- msg4.target.name.toString();
																					tra4.event <- thisModule.LrTransitionEvent(tra4);

																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																			
																					for (a4 in msg4.operation.args){
																						thisModule.argName <- a4.argName;
																						thisModule.argType <- a4.argType;
																						tra4.event.args <-  thisModule.LrTransitionEventArg(tra4.event);
																							
																						thisModule.inputVarName <- a4.argName;
																						thisModule.inputVarType <- a4.argType;
																						thisModule.inputVarClass <- a4.lifeline.name;
																						tra4.input.variables <- thisModule.LrTransitionInputVar(tra4.input);
																					}
																				}
																			}
																			if (msg4.type.toString() = 'si'){
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- '';
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);
																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																				}								
																			}
																			if ((msg4.type.toString() = 're') and (op4.guard.startsWith(msg4.name) = true)){
																				for (tra4 in e.transitions -> select(tra4 | tra4.target = thisModule.curState)) {
																					tra4.output <- 'not ('+op4.guard+')';
																					tra4.guard <- '! ('+op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ')+')';
																					tra4.action <- 'not ('+op4.guard+')';
																					-- Rule Transition
																					thisModule.source <- thisModule.preState;
																					thisModule.target <- thisModule.cfState4;
																					thisModule.output <- op4.guard;
																					thisModule.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																					thisModule.action <- op4.guard;
																					e.transitions <- thisModule.LrTransition(msg4);
																						
																					for (t4 in e.transitions -> select(t4 | t4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																						thisModule.eventName <- tra4.event.name;
																						thisModule.eventReturn <- tra4.event.return;
																						thisModule.eventClass <- tra4.event.class;
																						t4.event <- thisModule.LrTransitionEvent(t4);
																					
																						for (arg4 in tra4.event.args) {
																							thisModule.argName <- arg4.argName;
																							thisModule.argType <- arg4.argType;
																							t4.event.args <-  thisModule.LrTransitionEventArg(t4.event);
																						}
																					   
																						thisModule.inputName <- tra4.input.name;
																						t4.input <- thisModule.LrTransitionInput(t4);
																							
																						for (var4 in tra4.input.variables) {
																							thisModule.inputVarName <- var4.name;
																							thisModule.inputVarType <- var4.type;
																							thisModule.inputVarClass <- var4.class;
																							t4.input.variables <-  thisModule.LrTransitionInputVar(t4.input);
																						}
																					}
																				}        						
																			}
																		}
																	}
																}
																-- Rule alt or role opt
																if (fra4.interactionOperator.toString() = 'alt' or fra4.interactionOperator.toString() = 'opt'){
																	thisModule.firstOp4 <- 1;
																	thisModule.cfState4 <- thisModule.preState;
																	thisModule.cfStatePre4 <- thisModule.preState;
																	thisModule.cfStateCur4 <- thisModule.curState;
																	for (op4 in fra4.operands){
																		for (tra4 in e.transitions -> select(tra4 | tra4.source = thisModule.cfStatePre4 and tra4.target = thisModule.cfStateCur4)){	
																			if (thisModule.firstOp4 >= 1){
																				tra4.output <- op4.guard;
																				tra4.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																				tra4.action <- op4.guard;
																				thisModule.firstOp4 <- 0;
																			}
																			else{
																				-- Rule Transition
																				e.states <- thisModule.LrState();
																				thisModule.source <- thisModule.cfState4;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- op4.guard;
																				thisModule.guard <- op4.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																				thisModule.action <- op4.guard;
																				e.transitions <- thisModule.LrTransition();
																					
																				for (t4 in e.transitions -> select(t4 | t4.name = thisModule.source.name+'->'+thisModule.target.name)){
																					thisModule.eventName <- tra4.event.name;
																					thisModule.eventReturn <- tra4.event.return;
																					thisModule.eventClass <- tra4.event.class;
																					t4.event <- thisModule.LrTransitionEvent(t4);
																							
																					for (arg4 in tra4.event.args) {
																						thisModule.argName <- arg4.argName;
																						thisModule.argType <- arg4.argType;
																						t4.event.args <- thisModule.LrTransitionEventArg(t4.event);
																					}
																					
																					thisModule.inputName <- tra4.input.name;
																					t4.input <- thisModule.LrTransitionInput(t4);
																							
																					for (var4 in tra4.input.variables) {
																						thisModule.inputVarName <- var4.name;
																						thisModule.inputVarType <- var4.type;
																						thisModule.inputVarClass <- var4.class;
																						t4.input.variables <-  thisModule.LrTransitionInputVar(t4.input);
																					}
																				}
																			}
																		}
																		for (msg4 in op4.fragOpds -> select(msg4 | msg4.oclIsTypeOf(SequenceDiagram!Message))){
																			if (msg4.type.toString() = 'op'){
																				-- Rule ContextVariable
																				if (msg4.operation.returnType <> 'void'){
																					e.contextVariables <- thisModule.LrContextVariable(msg4.operation);
																				}
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																					
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				if (msg4.operation.returnType <> 'void'){
																					thisModule.output <- msg4.operation.returnvariable+' ';
																				}
																				else{
																					thisModule.output <- '';
																				}
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);

																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.eventName <- msg4.name;
																					thisModule.eventReturn <- msg4.operation.returnType;
																					thisModule.eventClass <- msg4.target.name.toString();
																					tra4.event <- thisModule.LrTransitionEvent(tra4);

																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);	 				

																					for (a4 in msg4.operation.args){
																						thisModule.argName <- a4.argName;
																						thisModule.argType <- a4.argType;
																						tra4.event.args <-  thisModule.LrTransitionEventArg(tra4.event);
																							
																						thisModule.inputVarName <- a4.argName;
																						thisModule.inputVarType <- a4.argType;
																						thisModule.inputVarClass <- a4.lifeline.name;
																						tra4.input.variables <-  thisModule.LrTransitionInputVar(tra4.input);
																					}
																				}
																			}
																			if (msg4.type.toString() = 'si'){
																				-- Rule Transition
																				e.states <- thisModule.LrState(msg4);
																				thisModule.source <- thisModule.preState;
																				thisModule.target <- thisModule.curState;
																				thisModule.output <- '';
																				thisModule.guard <- '';
																				thisModule.action <- '';
																				e.transitions <- thisModule.LrTransition(msg4);
																				for (tra4 in e.transitions -> select(tra4 | tra4.name = thisModule.source.name+'->'+thisModule.target.name)) {
																					thisModule.inputName <- msg4.name;
																					tra4.input <- thisModule.LrTransitionInput(tra4);
																				}								
																			}
																		}
																		if (thisModule.firstOpe4 >= 1){
																			thisModule.cfStateLas4 <- thisModule.curState;
																			thisModule.firstOpe4 <- 0;
																		}
																	}
																}
															}
														}
														-- Fourth Level - End			
													}
												}
												-- Rule alt or role opt
												if (fra3.interactionOperator.toString() = 'alt' or fra3.interactionOperator.toString() = 'opt'){
													thisModule.firstOp3 <- 1;
													thisModule.cfState3 <- thisModule.preState;
													thisModule.cfStatePre3 <- thisModule.preState;
													thisModule.cfStateCur3 <- thisModule.curState;
													for (op3 in fra3.operands){
														for (tra3 in e.transitions -> select(tra3 | tra3.source = thisModule.cfStatePre3 and tra3.target = thisModule.cfStateCur3)){	
															if (thisModule.firstOp3 >= 1){
																tra3.output <- op3.guard;
																tra3.guard <- op3.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																tra3.action <- op3.guard;
																thisModule.firstOp3 <- 0;
															}
															else{
																-- Rule Transition
																e.states <- thisModule.LrState();
																thisModule.source <- thisModule.cfState3;
																thisModule.target <- thisModule.curState;
																thisModule.output <- op3.guard;
																thisModule.guard <- op3.guard.regexReplaceAll(' = ',' == ').regexReplaceAll(' <> ',' != ').regexReplaceAll(' and ',' && ').regexReplaceAll(' or ',' || ');
																thisModule.action <- op3.guard;
																e.transitions <- thisModule.LrTransition();
																
																for (t3 in e.transitions -> select(t3 | t3.name = thisModule.source.name+'->'+thisModule.target.name)){
																	thisModule.eventName <- tra3.event.name;
																	thisModule.eventReturn <- tra3.event.return;
																	thisModule.eventClass <- tra3.event.class;
																	t3.event <- thisModule.LrTransitionEvent(t3);
																		
																	for (arg3 in tra3.event.args) {
																		thisModule.argName <- arg3.argName;
																		thisModule.argType <- arg3.argType;
																		t3.event.args <- thisModule.LrTransitionEventArg(t3.event);
																	}
																
																	thisModule.inputName <- tra3.input.name;
																	t3.input <- thisModule.LrTransitionInput(t3);
																		
																	for (var3 in tra3.input.variables) {
																		thisModule.inputVarName <- var3.name;
																		thisModule.inputVarType <- var3.type;
																		thisModule.inputVarClass <- var3.class;
																		t3.input.variables <-  thisModule.LrTransitionInputVar(t3.input);
																	}
																}
															}
														}
														for (msg3 in op3.fragOpds -> select(msg3 | msg3.oclIsTypeOf(SequenceDiagram!Message))){
															if (msg3.type.toString() = 'op'){
																-- Rule ContextVariable
																if (msg3.operation.returnType <> 'void'){
																	e.contextVariables <- thisModule.LrContextVariable(msg3.operation);
																}
																-- Rule Transition
																e.states <- thisModule.LrState(msg3);
																
																thisModule.source <- thisModule.preState;
																thisModule.target <- thisModule.curState;
																if (msg3.operation.returnType <> 'void'){
																	thisModule.output <- msg3.operation.returnvariable+' ';
																}
																else{
																	thisModule.output <- '';
																}
																thisModule.guard <- '';
																thisModule.action <- '';
																e.transitions <- thisModule.LrTransition(msg3);

																for (tra3 in e.transitions -> select(tra3 | tra3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																	thisModule.eventName <- msg3.name;
																	thisModule.eventReturn <- msg3.operation.returnType;
																	thisModule.eventClass <- msg3.target.name.toString();
																	tra3.event <- thisModule.LrTransitionEvent(tra3);

																	thisModule.inputName <- msg3.name;
																	tra3.input <- thisModule.LrTransitionInput(tra3);	 				

																	for (a3 in msg3.operation.args){
																		thisModule.argName <- a3.argName;
																		thisModule.argType <- a3.argType;
																		tra3.event.args <-  thisModule.LrTransitionEventArg(tra3.event);
																		
																		thisModule.inputVarName <- a3.argName;
																		thisModule.inputVarType <- a3.argType;
																		thisModule.inputVarClass <- a3.lifeline.name;
																		tra3.input.variables <-  thisModule.LrTransitionInputVar(tra3.input);
																	}
																}
															}
															if (msg3.type.toString() = 'si'){
																-- Rule Transition
																e.states <- thisModule.LrState(msg3);
																thisModule.source <- thisModule.preState;
																thisModule.target <- thisModule.curState;
																thisModule.output <- '';
																thisModule.guard <- '';
																thisModule.action <- '';
																e.transitions <- thisModule.LrTransition(msg3);
																for (tra3 in e.transitions -> select(tra3 | tra3.name = thisModule.source.name+'->'+thisModule.target.name)) {
																	thisModule.inputName <- msg3.name;
																	tra3.input <- thisModule.LrTransitionInput(tra3);
																}								
															}
														}
														if (thisModule.firstOpe3 >= 1){
															thisModule.cfStateLas3 <- thisModule.curState;
															thisModule.firstOpe3 <- 0;
														}
													}
												}
											}
										}
										-- Third Level - End									
										if (thisModule.firstOpe2 >= 1){
											thisModule.cfStateLas2 <- thisModule.curState;
											thisModule.firstOpe2 <- 0;
										}
									}
								}
							}
						}
						-- Second Level
			 			if (thisModule.firstOpe >= 1){
			 				thisModule.cfStateLas <- thisModule.curState;
			 				thisModule.firstOpe <- 0;
			 			}
			 		}
				}
			}
		}
	}
}
	
lazy rule LrInitialState {
	from
		l : SequenceDiagram!LifeLine
	to  
		i : EFSM!InitialState(name <- 'S0')
	do {
		thisModule.order <- thisModule.order + 1;
		thisModule.preState <- i;
		thisModule.curState <- i;
	}
}

lazy rule LrState {
	from
		m : SequenceDiagram!Message
	to  
		i : EFSM!State(
			name <- 'S'+thisModule.order.toString()
		)
	do{
		thisModule.order <- thisModule.order + 1;
		thisModule.preState <- thisModule.curState;
		thisModule.curState <- i;
	}
}

lazy rule LrTransition {
	from
		m : SequenceDiagram!Message
	to  
		t : EFSM!Transition(
			output <- thisModule.output,
			source <- thisModule.source,
			target <- thisModule.target,
			name <- thisModule.source.name+'->'+thisModule.target.name,
			guard <- thisModule.guard,
			action <- thisModule.action
		)
}

lazy rule LrTransitionInput {
	from
		t : EFSM!Transition
	to  
		i : EFSM!Input(
			name <- thisModule.inputName
		)
}

lazy rule LrTransitionInputVar {
	from
		t : EFSM!Input
	to  
		i : EFSM!Variable(
			name <- thisModule.inputVarName,
			type <- thisModule.inputVarType,
			class <- thisModule.inputVarClass
		)
}
lazy rule LrTransitionEvent {
	from
		t : EFSM!Transition
	to  
		i : EFSM!Event(
			name <- thisModule.eventName,
			return <- thisModule.eventReturn,
			class <- thisModule.eventClass
		)
}

lazy rule LrTransitionEventArg {
	from
		t : EFSM!Event
	to  
		i : EFSM!Param(
			argName <- thisModule.argName,
			argType <- thisModule.argType
		)
}

lazy rule LrContextVariable {
	from
		o : SequenceDiagram!Operation
	to  
		v : EFSM!ContextVariable(
			name <- o.returnVariable,
			type <- o.returnType
		)
}